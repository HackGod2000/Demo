{"version":3,"sources":["Components/images/marsmap1k.jpg","Components/images/marsbump1k.jpg","Components/images/background.png","Components/endpage.jsx","Components/Controls.jsx","Components/Startpage.jsx","Components/Model.jsx","Components/algorithms/astar.js","Components/algorithms/Bestfs.js","Components/algorithms/bfs.js","Components/algorithms/bi-dijkstra.js","Components/algorithms/biastar.js","Components/algorithms/BiBestfs.js","Components/algorithms/bibfs.js","Components/algorithms/BiIastar.js","Components/algorithms/dijkstra.js","Components/algorithms/Iastar.js","Components/algorithms/IBestfs.js","Components/algorithms/IDAstar_new.js","Components/algorithms/jps.js","Components/algorithms/orthJPS.js","Components/PathfindingVisualizer/Node.jsx","Components/PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Model","url","useLoader","GLTFLoader","draco","nodes","materials","rotation","Math","PI","position","scale","castShadow","receiveShadow","geometry","planet001","material","scene","Loading","useState","finished","set","width","setWidth","useEffect","THREE","onLoad","onProgress","itemsLoaded","itemsTotal","useTransition","from","opacity","leave","update","map","item","key","props","div","className","style","endpage","state","height","shadowMap","camera","intensity","angle","penumbra","shadow-mapSize-width","shadow-mapSize-height","shadow-bias","attach","args","fallback","autoRotate","enablePan","enableZoom","enableDamping","dampingFactor","rotateSpeed","maxPolarAngle","minPolarAngle","href","children","Component","extend","OrbitControls","Controls","controlsRef","useRef","useThree","gl","size","useFrame","current","ref","domElement","enableRotate","Startpage","color","sleep","ms","Promise","resolve","setTimeout","Mars","mesh","hovered","setHover","active","setActive","imgmars","useMemo","load","marsURL","bumpmap1","bumperURL","console","log","y","onClick","e","onPointerOver","onPointerOut","bumpmap","bumpscale","data","zoom","bind","enlarge","document","body","backgroundImage","img1","i","j","k","scaled","parseFloat","this","setState","a","window","location","isReachable","grid","r","c","length","wallweight","getneighbors","node","diagonalallowed","neighbors","temp","push","row","col","Heap","require","Astar","startNode","finishNode","h","openList","nodeA","nodeB","fscore","gscore","inopen","b","visitedNodesInOrder","empty","pop","isWall","inclosed","neighbor","ng","sqrt","hscore","previousNode","updateItem","Bestfs","heuristic","distance","unvisitedNodes","getAllNodes","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","unvisitedNeighbors","filter","getUnvisitedNeighbors","value","localeCompare","abs","max","pow","x_dist","y_dist","min","bfs","queue","bidijkstra","TempEnd","TempStart","tempstart","_","cloneDeep","tempend","startvisited","temp1","unshift","endvisited","temp2","closestNodeEnd","unvisitedNeighbors2","next","bidfsans","ans","s","BiAstar","startopenList","endopenList","temp3","enode","temp4","eneighbors","eneighbor","temp5","nex","temp6","tempx","BiBestfs","updateUnvisitedNeighborsStart","closestNode2","updateUnvisitedNeighborsEnd","bbfs","startqueue","endqueue","ftNode","unvisitedNeighbor","neighbora","bibfsans","BiIastar","dijkstra","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","Iastar","IBestfs","IDAstar","depth","heurestics","dx","dy","dblock","cX","cY","dX","dY","blocked","direction","sign","identifySuccessors","successors","parent","x","nodeNeighbors","jumpPoint","jump","curr","nX","nY","oX","oY","Node","isFinish","isStart","isWallweight","onMouseDown","onMouseEnter","onMouseUp","extraClassName","id","PathfindingVisualizer","mouseIsPressed","fin","inf","pause","handleOptionChangefinite","handleOptionChangeinfinite","handleChange2","handleSubmit","event","parseInt","prompt","target","alert","preventDefault","getInitialGrid","newGrid","getNewGridWithWallToggled","animateShortestPath","getElementById","animate","n","successor","val","jps","direc","d","diff","l","jpsans","orthJPS","xcord","ycord","m","orthogonalans","grid1","node1","class","tabindex","visualizeDijkstra","visualizeBiDijkstra","visualizeDijkstraDiag","visualizeBiDijkstraDiag","visualizeBFS","visualizeBBFS","visualizeBFSwithdiagonals","visualizeBDBFS","visualizeIntelligentAstar","visualizeBiIntelligentAstar","visualizeIntelligentAstarDiag","visualizeBiIntelligentAstarDiag","visualizeAstar","visualizeBiAstarNodiagoanls","visualizeOrthAstar","visualizeBiAstarWithDiagonals","visualizeBestfs","visualizeBiBestfs","visualizeBestfsDiag","visualizeBiBestfsDiag","visualizeIBestfs","visualizeIBestfsDiag","visualizeIDAstar","visualizeIDAstarDiag","visualizeJPS","visualizeOrthJPS","type","name","checked","onChange","for","tabIndex","clearPath","clearwall","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","weight","slice","newNode","App","exact","path","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.11cf9c67.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/marsmap1k.56f226a5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/marsbump1k.f68f2bda.jpg\";","module.exports = __webpack_public_path__ + \"static/media/background.ae5e05e2.png\";","import { draco, OrbitControls } from \"drei\";\r\nimport React, { Component, Suspense, useEffect, useState } from \"react\";\r\nimport { a, useTransition } from \"react-spring\";\r\nimport { Canvas, useLoader } from \"react-three-fiber\";\r\nimport * as THREE from \"three\";\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\nimport \"./endpage.css\";\r\n//import Url3d from \"../../public/scene\"\r\n\r\nfunction Model({ url }) {\r\n  const { nodes, materials } = useLoader(GLTFLoader, url, draco());\r\n  return (\r\n    <group\r\n      rotation={[-Math.PI / 2, 0, 0]}\r\n      position={[0, -7, 0]}\r\n      scale={[7, 7, 7]}\r\n    >\r\n      <group rotation={[Math.PI / 13.5, -Math.PI / 5.8, Math.PI / 5.6]}>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.planet001.geometry}\r\n          material={materials.scene}\r\n        />\r\n      </group>\r\n    </group>\r\n  );\r\n}\r\nfunction Loading() {\r\n  const [finished, set] = useState(false);\r\n  const [width, setWidth] = useState(0);\r\n\r\n  useEffect(() => {\r\n    THREE.DefaultLoadingManager.onLoad = () => set(true);\r\n    THREE.DefaultLoadingManager.onProgress = (url, itemsLoaded, itemsTotal) =>\r\n      setWidth((itemsLoaded / itemsTotal) * 200);\r\n  }, []);\r\n\r\n  const props = useTransition(finished, null, {\r\n    from: { opacity: 1, width: 0 },\r\n    leave: { opacity: 0 },\r\n    update: { width },\r\n  });\r\n\r\n  return props.map(\r\n    ({ item: finished, key, props: { opacity, width } }) =>\r\n      !finished && (\r\n        <a.div className=\"loading\" key={key} style={{ opacity }}>\r\n          <div className=\"loading-bar-container\">\r\n            <a.div className=\"loading-bar\" style={{ width }} />\r\n          </div>\r\n        </a.div>\r\n      )\r\n  );\r\n}\r\n\r\nclass endpage extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"bg\" />\r\n        <h1>\r\n          TheEnd\r\n          <br />\r\n          <span></span>\r\n        </h1>\r\n        <Canvas\r\n          style={{ height: 950 }}\r\n          shadowMap\r\n          camera={{ position: [0, 0, 21] }}\r\n        >\r\n          <ambientLight intensity={0.75} />\r\n          <pointLight intensity={1} position={[-10, -30, -10]} />\r\n          <spotLight\r\n            castShadow\r\n            intensity={2.25}\r\n            angle={0.2}\r\n            penumbra={1}\r\n            position={[25, 25, 25]}\r\n            shadow-mapSize-width={1024}\r\n            shadow-mapSize-height={1024}\r\n            shadow-bias={-0.0001}\r\n          />\r\n          <fog attach=\"fog\" args={[\"#cc7b32\", 20, 25]} />\r\n          <Suspense fallback={null}>\r\n            <Model url=\"/scene-draco.gltf\" />\r\n          </Suspense>\r\n          <OrbitControls\r\n            autoRotate\r\n            enablePan={false}\r\n            enableZoom={true}\r\n            enableDamping\r\n            dampingFactor={0.5}\r\n            rotateSpeed={1}\r\n            maxPolarAngle={Math.PI / 2}\r\n            minPolarAngle={Math.PI / 2}\r\n          />\r\n        </Canvas>\r\n        <div className=\"layer\" />\r\n        <Loading />\r\n        <a\r\n          href=\"https://github.com/HackGod2000/TouchDown.js\"\r\n          className=\"top-left\"\r\n          children=\"Github\"\r\n        />\r\n\r\n        <a\r\n          href=\"https://github.com/drcmda/react-three-fiber\"\r\n          className=\"top-right\"\r\n          children=\"+ react-three-fiber\"\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default endpage;\r\n","import React, { useRef } from \"react\";\r\nimport { extend, useFrame, useThree } from \"react-three-fiber\";\r\nimport OrbitControls from \"three-orbitcontrols\";\r\n\r\n//Controls teh camera view and orbitControls\r\n\r\nextend({ OrbitControls });\r\n\r\nfunction Controls() {\r\n  const controlsRef = useRef();\r\n  const { camera, gl, size } = useThree();\r\n\r\n  useFrame(() => controlsRef.current && controlsRef.current.update());\r\n\r\n  return (\r\n    <orbitControls\r\n      ref={controlsRef}\r\n      args={[camera, gl.domElement]}\r\n      enableRotate\r\n      enablePan={true}\r\n      //maxPolarAngle={Math.PI / 3}\r\n      //minPolarAngle={Math.PI}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Controls;\r\n","import React from \"react\";\r\nimport \"./Model.css\";\r\n\r\nfunction Startpage() {\r\n  return (\r\n    <div className=\"text-box\">\r\n      <div className=\"heading\">INSTRUCTION</div>\r\n      <div className=\"text-box2\">\r\n        <p style={{ color: \"#fafafa\" }}>\r\n          Welcome to Mars! You will be taken to our land where you will have\r\n          some starting position and a destination; both can be altered by you\r\n          accordingly. Since you are all alone here, you have to reach your\r\n          destination as soon as possible. There will be many hurdles in your\r\n          way, which again can be decided by you. These hurdles will be in the\r\n          form of a weighted wall, and you have two kinds of walls: infinite\r\n          weighted and finite weighted walls. You cannot jump over the infinite\r\n          weighted wall at any cost whereas, in a finite weighted, you will\r\n          first choose a weight and then apply it your land and you can jump\r\n          over them, but this comes with some penalty. To help you find your\r\n          way, we have a bunch of algorithms which will help you to calculate\r\n          your <strong>shortest path</strong>. You can explore various options\r\n          under them.\r\n          <p style={{ color: \"#fafafa\" }}>\r\n            To land on Mars, click on <strong>START</strong>!\r\n          </p>\r\n          <p style={{ color: \"#fafafa\" }}>Enjoy your journey!</p>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Startpage;\r\n","import React, { Component, useMemo, useRef, useState } from \"react\";\r\nimport { Canvas, useFrame } from \"react-three-fiber\";\r\nimport * as THREE from \"three\";\r\nimport Controls from \"./Controls\";\r\nimport img1 from \"./images/background.png\";\r\nimport bumperURL from \"./images/marsbump1k.jpg\";\r\nimport marsURL from \"./images/marsmap1k.jpg\";\r\nimport \"./Model.css\";\r\nimport StartPage from \"./Startpage\";\r\n\r\nconsole.log(bumperURL);\r\n\r\nclass Model extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n      scale: [1, 1, 1],\r\n    };\r\n    this.zoom = this.zoom.bind(this);\r\n    this.enlarge = this.enlarge.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    document.body.style.backgroundImage = `url(${img1})`;\r\n  }\r\n  enlarge(i, j, k) {\r\n    const scaled = parseFloat(`${i}.${j}${k}`, 10);\r\n    this.setState({ scale: [scaled, scaled, scaled] });\r\n  }\r\n  async zoom() {\r\n    for (let i = 1; i <= 2; i++) {\r\n      for (let j = 0; j <= 9; j++) {\r\n        for (let k = 0; k <= 9; k++) {\r\n          await this.enlarge(i, j, k);\r\n          await sleep(5);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    const { data } = this.state;\r\n    //<SpaceShip />\r\n    //\r\n    //console.log(data);\r\n    return (\r\n      //  Sonali startpage.jsx controls the design element of the page.\r\n\r\n      <>\r\n        <StartPage />\r\n        <div className=\"button-wrapper\">\r\n          <div\r\n            className=\"button\"\r\n            onClick={async () => {\r\n              await this.zoom();\r\n              window.location =\r\n                \"https://hackgod2000.github.io/TouchDown.js/#/algo\";\r\n            }}\r\n          >\r\n            START\r\n          </div>\r\n        </div>\r\n        <div className=\"canvas-div\">\r\n          <Canvas\r\n            //style={{ height: 950, width: 1650 }}\r\n            camera={{ position: [0, 0, 20] }}\r\n          >\r\n            <ambientLight intensity={1.0} />\r\n            <pointLight intensity={0.9} position={[-10, -25, -10]} />\r\n            <spotLight\r\n              castShadow\r\n              intensity={0.25}\r\n              angle={Math.PI / 8}\r\n              position={[25, 25, 15]}\r\n              shadow-mapSize-width={2048}\r\n              shadow-mapSize-height={2048}\r\n            />\r\n            <Controls />\r\n\r\n            <Mars position={[1.2, 0, 0]} scale={this.state.scale} />\r\n          </Canvas>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\nfunction sleep(ms) {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nfunction Mars(props) {\r\n  // This reference will give us direct access to the mesh\r\n  const mesh = useRef();\r\n\r\n  //const clothTexture = useLoader(TextureLoader(), marsURL);\r\n  //console.log(clothTexture);\r\n  // Set up state for the hovered and active state\r\n  const [hovered, setHover] = useState(false);\r\n  const [active, setActive] = useState(false);\r\n  const imgmars = useMemo(() => new THREE.TextureLoader().load(marsURL), [\r\n    marsURL,\r\n  ]);\r\n  const bumpmap1 = useMemo(() => new THREE.TextureLoader().load(bumperURL), [\r\n    bumperURL,\r\n  ]);\r\n  console.log(marsURL);\r\n  // Rotate mesh every frame, this is outside of React without overhead\r\n  useFrame(() => (mesh.current.rotation.y += 0.006));\r\n  return (\r\n    <mesh\r\n      {...props}\r\n      ref={mesh}\r\n      scale={props.scale}\r\n      onClick={(e) => {\r\n        setActive(!active);\r\n      }}\r\n      onPointerOver={(e) => setHover(true)}\r\n      onPointerOut={(e) => setHover(false)}\r\n    >\r\n      <sphereGeometry attach=\"geometry\" args={[6, 26, 26]} />\r\n      <meshStandardMaterial\r\n        attach=\"material\"\r\n        color={hovered ? \"hotpink\" : \"orange\"}\r\n        map={imgmars}\r\n        bumpmap={bumpmap1}\r\n        bumpscale={0.1}\r\n      />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nexport default Model;\r\n","function isReachable(grid, r, c) {\r\n  if (-1 < r && -1 < c && r < grid.length && c < grid[0].length) {\r\n    if (!grid[r][c].wallweight < 99999999) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\nfunction getneighbors(grid, node, diagonalallowed) {\r\n  var neighbors = [];\r\n  // else{\r\n  var temp = [\r\n    [-1, 0],\r\n    [0, -1],\r\n    [0, 1],\r\n    [1, 0],\r\n  ];\r\n  // }\r\n  if (diagonalallowed) {\r\n    temp.push([-1, -1]);\r\n    temp.push([1, -1]);\r\n    temp.push([1, 1]);\r\n    temp.push([-1, 1]);\r\n  }\r\n  for (var i = 0; i < temp.length; i++) {\r\n    var r = node.row + temp[i][0];\r\n    var c = node.col + temp[i][1];\r\n    if (isReachable(grid, r, c)) {\r\n      neighbors.push(grid[r][c]);\r\n    }\r\n  }\r\n  return neighbors;\r\n}\r\nfunction heuristic(a, b) {\r\n  return Math.sqrt((b.row - a.row) ** 2 + (b.col - a.col) ** 2);\r\n}\r\nvar Heap = require(\"heap\");\r\nexport function Astar(grid, startNode, finishNode, h, diagonalallowed) {\r\n  //console.log(diagonalallowed)\r\n  var openList = new Heap(function (nodeA, nodeB) {\r\n    return nodeA.fscore - nodeB.fscore;\r\n  });\r\n  startNode.gscore = 0;\r\n  startNode.fscore = 0;\r\n  openList.push(startNode);\r\n  startNode.inopen = true;\r\n  const visitedNodesInOrder = [];\r\n  while (!openList.empty()) {\r\n    var node = openList.pop();\r\n    if (node.isWall && node.wallweight === 99999999) {\r\n      continue;\r\n    }\r\n    node.inclosed = true;\r\n\r\n    visitedNodesInOrder.push(node);\r\n    if (node === finishNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    var neighbors = getneighbors(grid, node, diagonalallowed);\r\n    for (var i = 0; i < neighbors.length; i++) {\r\n      var neighbor = neighbors[i];\r\n      if (!neighbor.inclosed) {\r\n        var r = neighbor.row;\r\n        var c = neighbor.col;\r\n        var ng =\r\n          node.gscore +\r\n          Math.sqrt(\r\n            (neighbor.row - node.row) ** 2 + (neighbor.col - node.col) ** 2\r\n          );\r\n        if (!neighbor.inopen || ng < neighbor.gscore) {\r\n          neighbor.gscore = ng;\r\n          neighbor.hscore = heuristic(neighbor, finishNode);\r\n          neighbor.fscore =\r\n            neighbor.gscore + neighbor.hscore * neighbor.wallweight;\r\n          neighbor.previousNode = node;\r\n\r\n          if (!neighbor.inopen) {\r\n            openList.push(neighbor);\r\n            neighbor.inopen = true;\r\n          } else {\r\n            openList.updateItem(neighbor);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n","//This is my variation of BEST FIRST SEARCH\r\nexport function Bestfs(grid, startNode, finishNode,heuristic,diagonalallowed) {\r\n    const visitedNodesInOrder = []; //closed list\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid); //open list\r\n    while (unvisitedNodes.length>0) {\r\n      sortNodesByDistance(unvisitedNodes);\r\n      const closestNode = unvisitedNodes.shift();\r\n      // If we encounter a wall, we skip it.\r\n      if (closestNode.isWall && closestNode.wallweight==99999999) continue;\r\n      // If the closest node is at a distance of infinity,\r\n      // we must be trapped and should therefore stop.\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid,finishNode,heuristic,diagonalallowed,closestNode.wallweight);\r\n    }\r\n  }\r\n  function sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n  \r\n  function updateUnvisitedNeighbors(node, grid,finishNode,heuristic,diagonalallowed,wallweight) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid,diagonalallowed);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      console.log(finishNode.col);\r\n      console.log(neighbor.col);\r\n      var value;\r\n      var string=\"Manhattan\";\r\n      var string2=\"Diagonal\";\r\n      var string3=\"Euclidean\";\r\n      var string4=\"Octile\";\r\n      var string5=\"Chebyshev\";\r\n      if(heuristic.localeCompare(string)==0)\r\n      {\r\n        value=Math.abs(neighbor.row-finishNode.row)+Math.abs(neighbor.col-finishNode.col);\r\n        console.log(value);\r\n      }\r\n      else if(heuristic.localeCompare(string2)==0)\r\n      {\r\n        value=Math.max(Math.abs(neighbor.row-finishNode.row),Math.abs(neighbor.col-finishNode.col));\r\n        console.log(value);\r\n      }\r\n      else if(heuristic.localeCompare(string3)==0)\r\n      {\r\n        value=Math.sqrt(Math.pow((neighbor.row-finishNode.row),2)+Math.pow((neighbor.col-finishNode.col),2));\r\n        console.log(value);\r\n      }\r\n      else if(heuristic.localeCompare(string4)==0)\r\n      {\r\n        var x_dist=Math.abs(neighbor.row-finishNode.row);\r\n        var y_dist=Math.abs(neighbor.col-finishNode.col);\r\n        value=Math.max(x_dist,y_dist)+(Math.sqrt(2)-1) * Math.min(x_dist,y_dist);\r\n        console.log(value);\r\n      }\r\n      else if(heuristic.localeCompare(string5)==0)\r\n      {\r\n        value=Math.max(Math.abs(neighbor.row-finishNode.row),Math.abs(neighbor.col-finishNode.col));\r\n        console.log(value);\r\n      }\r\n      neighbor.distance=value*wallweight;\r\n      neighbor.previousNode = node;\r\n      neighbor.isVisited=true;\r\n    }\r\n  }\r\n  \r\n  function getUnvisitedNeighbors(node, grid,diagonalallowed) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    if (diagonalallowed){\r\n      if (row > 0 && col > 0) neighbors.push(grid[row-1][col-1]);\r\n      if (row > 0 && col < grid[0].length - 1) neighbors.push(grid[row-1][col+1]);\r\n      if (row <  grid.length - 1 && col > 0 ) neighbors.push(grid[row+1][col-1]);\r\n      if (row <  grid.length - 1 && col < grid[0].length - 1) neighbors.push(grid[row+1][col+1]);\r\n      \r\n    }\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n  \r\n  function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n  \r\n  // Backtracks from the finishNode to find the shortest path.\r\n  // Only works when called *after* the dijkstra method above.\r\n  function getNodesInShortestPathOrder(finishNode) \r\n  {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }\r\n  ","export function bfs(grid,startNode,finishNode,diagonalallowed){\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const queue = [startNode];\r\n  while (!!queue.length){\r\n    const closestNode = queue.shift();\r\n    if (closestNode.wallweight === 99999999) continue ;\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(closestNode, grid,diagonalallowed);\r\n    for (const neighbor of unvisitedNeighbors){\r\n      neighbor.previousNode = closestNode;\r\n      neighbor.isVisited = true;\r\n      neighbor.distance = closestNode.distance + neighbor.wallweight;\r\n      queue.push(neighbor);\r\n    }\r\n\r\n  }\r\n  return visitedNodesInOrder\r\n}\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid,diagonalallowed) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  if (diagonalallowed){\r\n    if (row > 0 && col > 0) neighbors.push(grid[row-1][col-1]);\r\n    if (row > 0 && col < grid[0].length - 1) neighbors.push(grid[row-1][col+1]);\r\n    if (row <  grid.length - 1 && col > 0 ) neighbors.push(grid[row+1][col-1]);\r\n    if (row <  grid.length - 1 && col < grid[0].length - 1) neighbors.push(grid[row+1][col+1]);\r\n    \r\n  }\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nimport _ from \"lodash\" ;\r\nexport function bidijkstra(grid,startNode,finishNode,diagonalallowed){\r\n    const visitedNodesInOrder = [];\r\n    const TempEnd=[];\r\n    const TempStart=[];\r\n    const tempstart = _.cloneDeep(startNode);\r\n    tempstart.distance=0;\r\n    const tempend = _.cloneDeep(finishNode);\r\n    tempend.distance=0;\r\n    TempStart.push(tempstart);\r\n    TempEnd.push(tempend);\r\n    while (TempStart.length>0 && TempEnd.length>0){\r\n        sortNodesByDistance(TempStart);\r\n      const closestNode = TempStart.shift();\r\n      if (closestNode.isWall && closestNode.wallweight==999999) continue ;\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.startvisited = true;\r\n      const unvisitedNeighbors = getUnvisitedNeighbors(closestNode, grid,diagonalallowed);\r\n      for (const neighbor of unvisitedNeighbors){\r\n        if (neighbor.startvisited) continue ;\r\n        // console.log(\"Neighbor updating\");  \r\n        // closestNode.next=neighbor;\r\n        neighbor.previousNode = closestNode;\r\n          neighbor.startvisited = true;\r\n          neighbor.distance = closestNode.distance + closestNode.wallweight;\r\n          TempStart.push(neighbor);\r\n      }\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) {\r\n          console.log(\"Hello\");\r\n        var temp1 = [closestNode];\r\n        visitedNodesInOrder.unshift(temp1)\r\n        return visitedNodesInOrder;\r\n      }\r\n      if (closestNode.endvisited){\r\n          // console.log(\"Hi\");\r\n        var temp2 = [closestNode];\r\n        visitedNodesInOrder.unshift(temp2)\r\n        return visitedNodesInOrder;\r\n      }\r\n      \r\n      // console.log(\"Entering another field\");\r\n      sortNodesByDistance(TempEnd);\r\n      const closestNodeEnd = TempEnd.shift();\r\n      if (closestNodeEnd.isWall && closestNodeEnd.wallweight==999999) continue ;\r\n      if (closestNodeEnd.distance === Infinity) return visitedNodesInOrder;\r\n      closestNodeEnd.endvisited = true;\r\n      const unvisitedNeighbors2 = getUnvisitedNeighbors(closestNodeEnd, grid,diagonalallowed);\r\n      for (const neighbor of unvisitedNeighbors2){\r\n        if (neighbor.endvisited) continue ;\r\n         neighbor.next=closestNodeEnd; \r\n         // neighbor.previousNode = closestNodeEnd;\r\n          neighbor.endvisited = true;\r\n          neighbor.distance = closestNodeEnd.distance + closestNodeEnd.wallweight;\r\n          TempEnd.push(neighbor);\r\n          // console.log(\"Neighbor updation\");\r\n      }\r\n      visitedNodesInOrder.push(closestNodeEnd);\r\n      if (closestNodeEnd === startNode) {\r\n          console.log(\"Reached End\");\r\n        var temp1 = [closestNodeEnd];\r\n        visitedNodesInOrder.unshift(temp1)\r\n        return visitedNodesInOrder;\r\n      }\r\n      if (closestNodeEnd.startvisited){\r\n          console.log(\"Hurrayyyy!!!\");\r\n        var temp2 = [closestNodeEnd];\r\n        visitedNodesInOrder.unshift(temp2)\r\n        return visitedNodesInOrder;\r\n      }\r\n      \r\n      \r\n    }\r\n    while ( TempStart.length>0){\r\n        // console.log(\"Start side left\");\r\n        sortNodesByDistance(TempStart);\r\n      const closestNode = TempStart.shift();\r\n      if (closestNode.isWall && closestNode.wallweight==999999) continue ;\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.startvisited = true;\r\n      const unvisitedNeighbors = getUnvisitedNeighbors(closestNode, grid,diagonalallowed);\r\n      for (const neighbor of unvisitedNeighbors){\r\n        if (neighbor.startvisited) continue ;\r\n         neighbor.previousNode = closestNode;\r\n          neighbor.startvisited = true;\r\n          neighbor.distance = closestNode.distance + closestNode.wallweight;\r\n          TempStart.push(neighbor);\r\n      }\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) {\r\n        var temp1 = [closestNode];\r\n        visitedNodesInOrder.unshift(temp1)\r\n        return visitedNodesInOrder;\r\n      }\r\n      if (closestNode.endvisited){\r\n        var temp2 = [closestNode];\r\n        visitedNodesInOrder.unshift(temp2)\r\n        return visitedNodesInOrder;\r\n      }\r\n\r\n      \r\n    }\r\n    while (TempEnd.length>0){\r\n        // console.log(\"End side left\");\r\n      sortNodesByDistance(TempEnd);\r\n      const closestNodeEnd = TempEnd.shift();\r\n      if (closestNodeEnd.isWall && closestNodeEnd.wallweight==999999) continue ;\r\n      if (closestNodeEnd.distance === Infinity) return visitedNodesInOrder;\r\n      closestNodeEnd.endvisited = true;\r\n      const unvisitedNeighbors2 = getUnvisitedNeighbors(closestNodeEnd, grid,diagonalallowed);\r\n      for (const neighbor of unvisitedNeighbors2){\r\n        if (neighbor.endvisited) continue ;\r\n        neighbor.next=closestNodeEnd;\r\n          neighbor.endvisited = true;\r\n          neighbor.distance = closestNodeEnd.distance + closestNodeEnd.wallweight;\r\n          TempEnd.push(neighbor);\r\n      }\r\n      visitedNodesInOrder.push(closestNodeEnd);\r\n      if (closestNodeEnd === startNode) {\r\n        var temp1 = [closestNodeEnd];\r\n        visitedNodesInOrder.unshift(temp1)\r\n        return visitedNodesInOrder;\r\n      }\r\n      if (closestNodeEnd.startvisited){\r\n        var temp2 = [closestNodeEnd];\r\n        visitedNodesInOrder.unshift(temp2)\r\n        return visitedNodesInOrder;\r\n      }\r\n      \r\n    }\r\n  }\r\n  function sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n  \r\n  \r\n  function getUnvisitedNeighbors(node, grid,diagonalallowed) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    if (diagonalallowed){\r\n        if (row > 0 && col > 0) neighbors.push(grid[row-1][col-1]);\r\n        if (row > 0 && col < grid[0].length - 1) neighbors.push(grid[row-1][col+1]);\r\n        if (row <  grid.length - 1 && col > 0 ) neighbors.push(grid[row+1][col-1]);\r\n        if (row <  grid.length - 1 && col < grid[0].length - 1) neighbors.push(grid[row+1][col+1]);\r\n    }\r\n    return neighbors\r\n  }\r\n  \r\n  \r\n  \r\n  // Backtracks from the finishNode to find the shortest path.\r\n  // Only works when called after the dijkstra method above.\r\n  export function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }\r\n  export function bidfsans(node) {\r\n\r\n    // return [node];\r\n    console.log(node);\r\n    var ans = [];\r\n    let s = node;  \r\n    let e = node;\r\n    // console.log(s);\r\n    // console.log(e);\r\n    while (s.previousNode !== null && e.next!== null){\r\n      ans.unshift(s.previousNode);\r\n      ans.unshift(e.next);\r\n      s = s.previousNode;\r\n      e = e.next ;\r\n    }\r\n    while (s.previousNode !== null){\r\n        // console.log(\"Wohooo\");\r\n      ans.unshift(s.previousNode);\r\n      s = s.previousNode;\r\n    }\r\n    while (e.next !== null){\r\n      ans.unshift(e.next);\r\n      e = e.next ;\r\n    }\r\n    ans.push(node)\r\n    return ans\r\n  }\r\n  ","// function isReachable(grid,r,c){\r\n//     if (-1 < r && -1 < c && r < grid.length && c <grid[0].length){\r\n//         if (!grid[r][c].isWall){\r\n//             return true\r\n//         }\r\n//     }\r\n//     return false\r\n// }\r\n// function heuristic(a,b,h){\r\n//     if (h === 1){\r\n//         // Euclidean\r\n//        return Math.sqrt((b.row - a.row) ** 2 + (b.col - a.col) ** 2)\r\n//     }\r\n//     if (h === 2){\r\n//         // Manhattan\r\n//         return b.row - a.row + b.col - a.col\r\n//     }\r\n//     if (h === 3){\r\n//         // octile\r\n//         var a = Math.sqrt(2) - 1\r\n//         var dx = b.row - a.row \r\n//         var dy = b.col - a.col\r\n//         return dx + dy + (a- 2)*Math.min(dx,dy)\r\n\r\n//     }\r\n//     if (h === 4){\r\n//         // chebyshev\r\n//         var dx = b.row - a.row \r\n//         var dy = b.col - a.col\r\n//         return Math.max(dx,dy)\r\n//     }\r\n// }\r\n// var Heap = require('heap');\r\n// export function BiAstar(grid,startNode,finishNode,h){\r\n//     // console.log(startNode)\r\n//     var startopenList = new Heap(function(nodeA, nodeB) {return nodeA.fscore - nodeB.fscore})\r\n    \r\n//     var endopenList = new Heap(function(nodeA, nodeB) {return nodeA.fscore - nodeB.fscore})\r\n//     startNode.gscore = 0 ; finishNode.gscore = 0\r\n//     startNode.fscore = 0 ; finishNode.fscore = 0\r\n//     startopenList.push(startNode); endopenList.push(finishNode)\r\n//     startNode.inopen = true; finishNode.inopen = true\r\n//     const visitedNodesInOrder = [];\r\n//     while (!startopenList.empty() && !endopenList.empty()) {\r\n//         var node = startopenList.pop();\r\n//         node.inclosed = true;\r\n//         node.startvisited = true\r\n//         visitedNodesInOrder.push(node)\r\n//         if (node === finishNode){\r\n//             var temp1 = [node];\r\n//             console.log(1)\r\n//             visitedNodesInOrder.unshift(temp1)\r\n//             return visitedNodesInOrder;\r\n//         }\r\n//         var neighbors = getneighbors(grid,node)\r\n//         for (var i = 0; i<neighbors.length;i++){\r\n//             var neighbor = neighbors[i];\r\n//             if (neighbor.endvisited){\r\n//                 neighbor.previousNode = node\r\n//                 var temp2 = [neighbor];\r\n//                 console.log(2)\r\n//                 visitedNodesInOrder.unshift(temp2)\r\n//                 return visitedNodesInOrder;\r\n//             }\r\n//             if (!neighbor.inclosed) {\r\n//                 var r = neighbor.row; var c = neighbor.col ;\r\n//                 var ng = node.gscore + Math.sqrt((neighbor.row - node.row) ** 2 + (neighbor.col - node.col) ** 2)\r\n//                 if (!neighbor.inopen || ng < neighbor.gscore) {\r\n//                     neighbor.gscore = ng;\r\n//                     neighbor.hscore = heuristic(neighbor,finishNode,h);\r\n//                     neighbor.fscore = neighbor.gscore + neighbor.hscore;\r\n//                     neighbor.previousNode = node;\r\n\r\n//                     if (neighbor.endvisited){\r\n//                         var temp3 = [neighbor];\r\n//                         console.log(3)\r\n//                         visitedNodesInOrder.unshift(temp3)\r\n\r\n//                         return visitedNodesInOrder;\r\n//                     }\r\n//                     if (!neighbor.inopen) {\r\n//                         startopenList.push(neighbor);\r\n//                         neighbor.startvisited = true\r\n//                         neighbor.inopen = true;\r\n//                     } else {\r\n//                         startopenList.updateItem(neighbor);\r\n//                         neighbor.startvisited = true\r\n//                     }\r\n//                 }\r\n//             }\r\n//         }\r\n\r\n//         var enode = endopenList.pop();\r\n//         enode.inclosed = true;\r\n//         enode.endvisited = true\r\n//         visitedNodesInOrder.push(enode)\r\n//         if (enode === startNode){\r\n//             var temp4 = [enode];\r\n\r\n//             console.log(4)\r\n//             visitedNodesInOrder.unshift(temp4)\r\n//             return visitedNodesInOrder;\r\n//         }\r\n//         var eneighbors = getneighbors(grid,enode)\r\n//         for (var i = 0; i<eneighbors.length;i++){\r\n//             var eneighbor = eneighbors[i];\r\n//             if (eneighbor.startvisited){\r\n//                 var temp5 = [eneighbor];\r\n//                 eneighbor.nex = enode\r\n//                 console.log(5)\r\n//                 visitedNodesInOrder.unshift(temp5)\r\n//                 return visitedNodesInOrder;\r\n//             }\r\n//             if (!eneighbor.inclosed) {\r\n//                 var r = eneighbor.row; var c = eneighbor.col ;\r\n//                 var ng = enode.gscore + Math.sqrt((eneighbor.row - enode.row) ** 2 + (eneighbor.col - enode.col) ** 2)\r\n//                 if (!eneighbor.inopen || ng < eneighbor.gscore) {\r\n//                     eneighbor.gscore = ng;\r\n//                     eneighbor.hscore = heuristic(eneighbor,startNode,h);\r\n//                     eneighbor.fscore = eneighbor.gscore + eneighbor.hscore;\r\n//                     eneighbor.nex = enode;\r\n\r\n//                     if (eneighbor.startvisited){\r\n//                         var temp6 = [eneighbor];\r\n//                         console.log(6)\r\n//                         visitedNodesInOrder.unshift(temp6)\r\n\r\n//                         return visitedNodesInOrder;\r\n//                     }\r\n//                     if (!eneighbor.inopen) {\r\n//                         endopenList.push(eneighbor);\r\n//                         eneighbor.endvisited = true\r\n//                         eneighbor.inopen = true;\r\n//                     } else {\r\n//                         startopenList.updateItem(neighbor);\r\n//                         eneighbor.endvisited = true\r\n                        \r\n//                     }\r\n//                 }\r\n//             }\r\n//         }\r\n\r\n//     }\r\n//     return visitedNodesInOrder\r\n// }\r\n\r\n\r\n\r\n\r\nfunction isReachable(grid,r,c){\r\n    if (-1 < r && -1 < c && r < grid.length && c <grid[0].length){\r\n        if (!grid[r][c].isWall){\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\nfunction getneighbors(grid,node,diagonalallowed){\r\n    var neighbors = []; \r\n    // console.log(diagonalallowed)\r\n    // else{\r\n    var temp = [[-1,0],[0,-1],[0,1],[1,0]]\r\n    // }\r\n    if (diagonalallowed){\r\n        temp.push([-1,-1])\r\n        temp.push([1,-1])\r\n        temp.push([1,1])\r\n        temp.push([-1,1])\r\n    }\r\n    for (var i = 0 ; i< temp.length ; i++){\r\n        var r = node.row+temp[i][0]\r\n        var c = node.col+temp[i][1]\r\n        if (isReachable(grid,r,c)){\r\n            neighbors.push(grid[r][c])\r\n        }\r\n    }\r\n    return neighbors\r\n}\r\nfunction heuristic(a,b){\r\n    return Math.sqrt((b.row - a.row) ** 2 + (b.col - a.col) ** 2)\r\n}\r\nvar Heap = require('heap');\r\n// export function Astar(grid,startNode,finishNode,diagonalallowed){\r\n//     console.log(startNode)\r\n//     var openList = new Heap(function(nodeA, nodeB) {return nodeA.fscore - nodeB.fscore})\r\n//     startNode.gscore = 0 ;\r\n//     startNode.fscore = 0 ; \r\n//     openList.push(startNode);\r\n//     startNode.inopen = true;\r\n//     const visitedNodesInOrder = [];\r\n//     while (!openList.empty()) {\r\n//         var node = openList.pop();\r\n//         node.inclosed = true;\r\n//         visitedNodesInOrder.push(node)\r\n//         if (node === finishNode){\r\n//             return visitedNodesInOrder;\r\n//         }\r\n//         var neighbors = getneighbors(grid,node,diagonalallowed)\r\n//         for (var i = 0; i<neighbors.length;i++){\r\n//             var neighbor = neighbors[i];\r\n//             if (!neighbor.inclosed) {\r\n//                 var r = neighbor.row; var c = neighbor.col ;\r\n//                 var ng = node.gscore + Math.sqrt((neighbor.row - node.row) ** 2 + (neighbor.col - node.col) ** 2)\r\n//                 if (!neighbor.inopen || ng < neighbor.gscore) {\r\n//                     neighbor.gscore = ng;\r\n//                     neighbor.hscore = heuristic(neighbor,finishNode);\r\n//                     neighbor.fscore = neighbor.gscore + neighbor.hscore;\r\n//                     neighbor.previousNode = node;\r\n\r\n//                     if (!neighbor.inopen) {\r\n//                         openList.push(neighbor);\r\n//                         neighbor.inopen = true;\r\n//                     } else {\r\n//                         openList.updateItem(neighbor);\r\n//                     }\r\n//                 }\r\n//             }\r\n//         }\r\n//     }\r\n//     return visitedNodesInOrder\r\n// }\r\n\r\n\r\nexport function BiAstar(grid,startNode,finishNode,h,diagonalallowed){\r\n    // console.log(startNode)\r\n    var startopenList = new Heap(function(nodeA, nodeB) {return nodeA.fscore - nodeB.fscore})\r\n    \r\n    var endopenList = new Heap(function(nodeA, nodeB) {return nodeA.fscore - nodeB.fscore})\r\n    startNode.gscore = 0 ; finishNode.gscore = 0\r\n    startNode.fscore = 0 ; finishNode.fscore = 0\r\n    startopenList.push(startNode); endopenList.push(finishNode)\r\n    startNode.inopen = true; finishNode.inopen = true\r\n    const visitedNodesInOrder = [];\r\n    while (!startopenList.empty() && !endopenList.empty()) {\r\n        var node = startopenList.pop();\r\n        node.inclosed = true;\r\n        node.startvisited = true\r\n        visitedNodesInOrder.push(node)\r\n        if (node === finishNode){\r\n            var temp1 = [node];\r\n            console.log(1)\r\n            visitedNodesInOrder.unshift(temp1)\r\n            return visitedNodesInOrder;\r\n        }\r\n        var neighbors = getneighbors(grid,node,diagonalallowed)\r\n        for (var i = 0; i<neighbors.length;i++){\r\n            var neighbor = neighbors[i];\r\n            if (neighbor.endvisited){\r\n                neighbor.previousNode = node\r\n                var temp2 = [neighbor];\r\n                console.log(2)\r\n                visitedNodesInOrder.unshift(temp2)\r\n                return visitedNodesInOrder;\r\n            }\r\n            if (!neighbor.inclosed) {\r\n                var r = neighbor.row; var c = neighbor.col ;\r\n                var ng = node.gscore + Math.sqrt((neighbor.row - node.row) ** 2 + (neighbor.col - node.col) ** 2)\r\n                if (!neighbor.inopen || ng < neighbor.gscore) {\r\n                    neighbor.gscore = ng;\r\n                    neighbor.hscore = heuristic(neighbor,finishNode,h);\r\n                    neighbor.fscore = neighbor.gscore + neighbor.hscore;\r\n                    neighbor.previousNode = node;\r\n\r\n                    if (neighbor.endvisited){\r\n                        var temp3 = [neighbor];\r\n                        console.log(3)\r\n                        visitedNodesInOrder.unshift(temp3)\r\n\r\n                        return visitedNodesInOrder;\r\n                    }\r\n                    if (!neighbor.inopen) {\r\n                        startopenList.push(neighbor);\r\n                        neighbor.startvisited = true\r\n                        neighbor.inopen = true;\r\n                    } else {\r\n                        startopenList.updateItem(neighbor);\r\n                        neighbor.startvisited = true\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var enode = endopenList.pop();\r\n        enode.inclosed = true;\r\n        enode.endvisited = true\r\n        visitedNodesInOrder.push(enode)\r\n        if (enode === startNode){\r\n            var temp4 = [enode];\r\n\r\n            visitedNodesInOrder.unshift(temp4)\r\n            return visitedNodesInOrder;\r\n        }\r\n        var eneighbors = getneighbors(grid,enode,diagonalallowed)\r\n        for (var i = 0; i<eneighbors.length;i++){\r\n            var eneighbor = eneighbors[i];\r\n            if (eneighbor.startvisited){\r\n                var temp5 = [eneighbor];\r\n                eneighbor.nex = enode\r\n                visitedNodesInOrder.unshift(temp5)\r\n                return visitedNodesInOrder;\r\n            }\r\n            if (!eneighbor.inclosed) {\r\n                var r = eneighbor.row; var c = eneighbor.col ;\r\n                var ng = enode.gscore + Math.sqrt((eneighbor.row - enode.row) ** 2 + (eneighbor.col - enode.col) ** 2)\r\n                if (!eneighbor.inopen || ng < eneighbor.gscore) {\r\n                    eneighbor.gscore = ng;\r\n                    eneighbor.hscore = heuristic(eneighbor,startNode,h);\r\n                    eneighbor.fscore = eneighbor.gscore + eneighbor.hscore;\r\n                    eneighbor.nex = enode;\r\n\r\n                    if (eneighbor.startvisited){\r\n                        var temp6 = [eneighbor];\r\n                        console.log(6)\r\n                        visitedNodesInOrder.unshift(temp6)\r\n\r\n                        return visitedNodesInOrder;\r\n                    }\r\n                    if (!eneighbor.inopen) {\r\n                        endopenList.push(eneighbor);\r\n                        eneighbor.endvisited = true\r\n                        eneighbor.inopen = true;\r\n                    } else {\r\n                        startopenList.updateItem(neighbor);\r\n                        eneighbor.endvisited = true\r\n                        \r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n    while (!startopenList.empty()){\r\n        var node = startopenList.pop();\r\n        // console.log(node)\r\n        // if (!node) continue;\r\n        node.inclosed = true;\r\n        node.startvisited = true\r\n        visitedNodesInOrder.push(node)\r\n        if (node === finishNode){\r\n            var temp1 = [node];\r\n            console.log(1)\r\n            visitedNodesInOrder.unshift(temp1)\r\n            return visitedNodesInOrder;\r\n        }\r\n        var neighbors = getneighbors(grid,node,diagonalallowed)\r\n        for (var i = 0; i<neighbors.length;i++){\r\n            var neighbor = neighbors[i];\r\n            // if (neighbor.endvisited){\r\n            //     neighbor.previousNode = node\r\n            //     var temp2 = [neighbor];\r\n            //     console.log(2)\r\n            //     visitedNodesInOrder.unshift(temp2)\r\n            //     return visitedNodesInOrder;\r\n            // }\r\n            if (!neighbor.inclosed) {\r\n                var r = neighbor.row; var c = neighbor.col ;\r\n                var ng = node.gscore + Math.sqrt((neighbor.row - node.row) ** 2 + (neighbor.col - node.col) ** 2)\r\n                if (!neighbor.inopen || ng < neighbor.gscore) {\r\n                    neighbor.gscore = ng;\r\n                    neighbor.hscore = heuristic(neighbor,finishNode,h);\r\n                    neighbor.fscore = neighbor.gscore + neighbor.hscore;\r\n                    neighbor.previousNode = node;\r\n\r\n                    if (neighbor.endvisited){\r\n                        var temp3 = [neighbor];\r\n                        console.log(3)\r\n                        visitedNodesInOrder.unshift(temp3)\r\n\r\n                        return visitedNodesInOrder;\r\n                    }\r\n                    if (!neighbor.inopen) {\r\n                        startopenList.push(neighbor);\r\n                        neighbor.startvisited = true\r\n                        neighbor.inopen = true;\r\n                    } else {\r\n                        startopenList.updateItem(neighbor);\r\n                        neighbor.startvisited = true\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    while (!endopenList.empty()){\r\n        var enode = endopenList.pop();\r\n        // console.log(enode)\r\n        // if (!enode) continue;\r\n        enode.inclosed = true;\r\n        enode.endvisited = true\r\n        visitedNodesInOrder.push(enode)\r\n        if (enode === startNode){\r\n            var temp4 = [enode];\r\n\r\n            visitedNodesInOrder.unshift(temp4)\r\n            return visitedNodesInOrder;\r\n        }\r\n        var eneighbors = getneighbors(grid,enode,diagonalallowed)\r\n        for (var i = 0; i<eneighbors.length;i++){\r\n            var eneighbor = eneighbors[i];\r\n            // if (eneighbor.startvisited){\r\n            //     var temp5 = [eneighbor];\r\n            //     eneighbor.nex = enode\r\n            //     visitedNodesInOrder.unshift(temp5)\r\n            //     return visitedNodesInOrder;\r\n            // }\r\n            if (!eneighbor.inclosed) {\r\n                var r = eneighbor.row; var c = eneighbor.col ;\r\n                var ng = enode.gscore + Math.sqrt((eneighbor.row - enode.row) ** 2 + (eneighbor.col - enode.col) ** 2)\r\n                if (!eneighbor.inopen || ng < eneighbor.gscore) {\r\n                    eneighbor.gscore = ng;\r\n                    eneighbor.hscore = heuristic(eneighbor,startNode,h);\r\n                    eneighbor.fscore = eneighbor.gscore + eneighbor.hscore;\r\n                    eneighbor.nex = enode;\r\n\r\n                    if (eneighbor.startvisited){\r\n                        var temp6 = [eneighbor];\r\n                        console.log(6)\r\n                        visitedNodesInOrder.unshift(temp6)\r\n\r\n                        return visitedNodesInOrder;\r\n                    }\r\n                    if (!eneighbor.inopen) {\r\n                        endopenList.push(eneighbor);\r\n                        eneighbor.endvisited = true\r\n                        eneighbor.inopen = true;\r\n                    } else {\r\n                        startopenList.updateItem(neighbor);\r\n                        eneighbor.endvisited = true\r\n                        \r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    var tempx = [finishNode]\r\n    visitedNodesInOrder.unshift(tempx)\r\n    return visitedNodesInOrder\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import _ from \"lodash\";\r\nexport function BiBestfs(\r\n  grid,\r\n  startNode,\r\n  finishNode,\r\n  heuristic,\r\n  diagonalallowed\r\n) {\r\n  const visitedNodesInOrder = []; //closed list\r\n  const TempEnd = [];\r\n  const TempStart = [];\r\n  const tempstart = _.cloneDeep(startNode);\r\n  tempstart.distance = 0;\r\n  const tempend = _.cloneDeep(finishNode);\r\n  tempend.distance = 0;\r\n  TempStart.push(tempstart);\r\n  TempEnd.push(tempend);\r\n  while (TempStart.length > 0 && TempEnd.length > 0) {\r\n    sortNodesByDistance(TempStart);\r\n    const closestNode = TempStart.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall && closestNode.wallweight == 99999999) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.startvisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    updateUnvisitedNeighborsStart(\r\n      closestNode,\r\n      grid,\r\n      finishNode,\r\n      heuristic,\r\n      diagonalallowed,\r\n      TempStart,\r\n      closestNode.wallweight\r\n    );\r\n    if (closestNode === finishNode) {\r\n      //console.log(\"Hello\");\r\n      var temp1 = [closestNode];\r\n      visitedNodesInOrder.unshift(temp1);\r\n      return visitedNodesInOrder;\r\n    }\r\n    if (closestNode.endvisited) {\r\n      // //console.log(\"Hi\");\r\n      var temp2 = [closestNode];\r\n      visitedNodesInOrder.unshift(temp2);\r\n      return visitedNodesInOrder;\r\n    }\r\n\r\n    sortNodesByDistance(TempEnd);\r\n    const closestNode2 = TempEnd.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode2.isWall && closestNode2.wallweight == 99999999) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode2.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode2.endvisited = true;\r\n    updateUnvisitedNeighborsEnd(\r\n      closestNode2,\r\n      grid,\r\n      finishNode,\r\n      heuristic,\r\n      diagonalallowed,\r\n      TempEnd,\r\n      closestNode2.wallweight\r\n    );\r\n    visitedNodesInOrder.push(closestNode2);\r\n    if (closestNode2 === startNode) {\r\n      //console.log(\"Hello\");\r\n      var temp1 = [closestNode2];\r\n      visitedNodesInOrder.unshift(temp1);\r\n      return visitedNodesInOrder;\r\n    }\r\n    if (closestNode2.startvisited) {\r\n      //console.log(\"Hurrayyyy!!!\");\r\n      var temp2 = [closestNode2];\r\n      visitedNodesInOrder.unshift(temp2);\r\n      return visitedNodesInOrder;\r\n    }\r\n  }\r\n\r\n  while (TempStart.length > 0) {\r\n    // //console.log(\"Start side left\");\r\n    sortNodesByDistance(TempStart);\r\n    const closestNode = TempStart.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall && closestNode.wallweight == 99999999) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.startvisited = true;\r\n    updateUnvisitedNeighborsStart(\r\n      closestNode,\r\n      grid,\r\n      finishNode,\r\n      heuristic,\r\n      diagonalallowed,\r\n      TempStart,\r\n      closestNode.wallweight\r\n    );\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) {\r\n      //console.log(\"Hello\");\r\n      var temp1 = [closestNode];\r\n      visitedNodesInOrder.unshift(temp1);\r\n      return visitedNodesInOrder;\r\n    }\r\n    if (closestNode.endvisited) {\r\n      // //console.log(\"Hi\");\r\n      var temp2 = [closestNode];\r\n      visitedNodesInOrder.unshift(temp2);\r\n      return visitedNodesInOrder;\r\n    }\r\n  }\r\n\r\n  while (TempEnd.length > 0) {\r\n    // //console.log(\"End side left\");\r\n    sortNodesByDistance(TempEnd);\r\n    const closestNode2 = TempEnd.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode2.isWall && closestNode2.wallweight == 99999999) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode2.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode2.endvisited = true;\r\n    updateUnvisitedNeighborsEnd(\r\n      closestNode2,\r\n      grid,\r\n      finishNode,\r\n      heuristic,\r\n      diagonalallowed,\r\n      TempEnd,\r\n      closestNode2.wallweight\r\n    );\r\n    visitedNodesInOrder.push(closestNode2);\r\n    if (closestNode2 === startNode) {\r\n      //console.log(\"Hello\");\r\n      var temp1 = [closestNode2];\r\n      visitedNodesInOrder.unshift(temp1);\r\n      return visitedNodesInOrder;\r\n    }\r\n    if (closestNode2.startvisited) {\r\n      //console.log(\"Hurrayyyy!!!\");\r\n      var temp2 = [closestNode2];\r\n      visitedNodesInOrder.unshift(temp2);\r\n      return visitedNodesInOrder;\r\n    }\r\n  }\r\n}\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighborsEnd(\r\n  node,\r\n  grid,\r\n  finishNode,\r\n  heuristic,\r\n  diagonalallowed,\r\n  TempEnd,\r\n  wallweight\r\n) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid, diagonalallowed);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    if (neighbor.endvisited) continue;\r\n    //console.log(finishNode.col);\r\n    //console.log(neighbor.col);\r\n    var value;\r\n    var string = \"Manhattan\";\r\n    var string2 = \"Diagonal\";\r\n    var string3 = \"Euclidean\";\r\n    var string4 = \"Octile\";\r\n    var string5 = \"Chebyshev\";\r\n    if (heuristic.localeCompare(string) == 0) {\r\n      value =\r\n        Math.abs(neighbor.row - finishNode.row) +\r\n        Math.abs(neighbor.col - finishNode.col);\r\n      //console.log(value);\r\n    } else if (heuristic.localeCompare(string2) == 0) {\r\n      value = Math.max(\r\n        Math.abs(neighbor.row - finishNode.row),\r\n        Math.abs(neighbor.col - finishNode.col)\r\n      );\r\n      //console.log(value);\r\n    } else if (heuristic.localeCompare(string3) == 0) {\r\n      value = Math.sqrt(\r\n        Math.pow(neighbor.row - finishNode.row, 2) +\r\n          Math.pow(neighbor.col - finishNode.col, 2)\r\n      );\r\n      //console.log(value);\r\n    } else if (heuristic.localeCompare(string4) == 0) {\r\n      var x_dist = Math.abs(neighbor.row - finishNode.row);\r\n      var y_dist = Math.abs(neighbor.col - finishNode.col);\r\n      value =\r\n        Math.max(x_dist, y_dist) +\r\n        (Math.sqrt(2) - 1) * Math.min(x_dist, y_dist);\r\n      //console.log(value);\r\n    } else if (heuristic.localeCompare(string5) == 0) {\r\n      value = Math.max(\r\n        Math.abs(neighbor.row - finishNode.row),\r\n        Math.abs(neighbor.col - finishNode.col)\r\n      );\r\n      //console.log(value);\r\n    }\r\n    neighbor.next = node;\r\n    // neighbor.previousNode = closestNodeEnd;\r\n    neighbor.endvisited = true;\r\n    neighbor.distance = value + wallweight;\r\n    TempEnd.push(neighbor);\r\n  }\r\n}\r\nfunction updateUnvisitedNeighborsStart(\r\n  node,\r\n  grid,\r\n  finishNode,\r\n  heuristic,\r\n  diagonalallowed,\r\n  TempStart,\r\n  wallweight\r\n) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid, diagonalallowed);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    if (neighbor.startvisited) continue;\r\n    //console.log(finishNode.col);\r\n    //console.log(neighbor.col);\r\n    var value;\r\n    var string = \"Manhattan\";\r\n    var string2 = \"Diagonal\";\r\n    var string3 = \"Euclidean\";\r\n    var string4 = \"Octile\";\r\n    var string5 = \"Chebyshev\";\r\n    if (heuristic.localeCompare(string) == 0) {\r\n      value =\r\n        Math.abs(neighbor.row - finishNode.row) +\r\n        Math.abs(neighbor.col - finishNode.col);\r\n      //console.log(value);\r\n    } else if (heuristic.localeCompare(string2) == 0) {\r\n      value = Math.max(\r\n        Math.abs(neighbor.row - finishNode.row),\r\n        Math.abs(neighbor.col - finishNode.col)\r\n      );\r\n      //console.log(value);\r\n    } else if (heuristic.localeCompare(string3) == 0) {\r\n      value = Math.sqrt(\r\n        Math.pow(neighbor.row - finishNode.row, 2) +\r\n          Math.pow(neighbor.col - finishNode.col, 2)\r\n      );\r\n      //console.log(value);\r\n    } else if (heuristic.localeCompare(string4) == 0) {\r\n      var x_dist = Math.abs(neighbor.row - finishNode.row);\r\n      var y_dist = Math.abs(neighbor.col - finishNode.col);\r\n      value =\r\n        Math.max(x_dist, y_dist) +\r\n        (Math.sqrt(2) - 1) * Math.min(x_dist, y_dist);\r\n      //console.log(value);\r\n    } else if (heuristic.localeCompare(string5) == 0) {\r\n      value = Math.max(\r\n        Math.abs(neighbor.row - finishNode.row),\r\n        Math.abs(neighbor.col - finishNode.col)\r\n      );\r\n      //console.log(value);\r\n    }\r\n    neighbor.previousNode = node;\r\n    neighbor.startvisited = true;\r\n    neighbor.distance = value + wallweight;\r\n    TempStart.push(neighbor);\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid, diagonalallowed) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  if (diagonalallowed) {\r\n    if (row > 0 && col > 0) neighbors.push(grid[row - 1][col - 1]);\r\n    if (row > 0 && col < grid[0].length - 1)\r\n      neighbors.push(grid[row - 1][col + 1]);\r\n    if (row < grid.length - 1 && col > 0)\r\n      neighbors.push(grid[row + 1][col - 1]);\r\n    if (row < grid.length - 1 && col < grid[0].length - 1)\r\n      neighbors.push(grid[row + 1][col + 1]);\r\n  }\r\n  return neighbors;\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nfunction getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function bbfs(grid,startNode,finishNode,diagonalallowed){\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0; finishNode.distance = 0\r\n  const startqueue = [startNode];\r\n  startNode.startvisited = true;\r\n  finishNode.endvisited = true;\r\n  const endqueue = [finishNode];\r\n  while (!!startqueue.length && endqueue.length){\r\n    const closestNode = startqueue.shift();\r\n    if (closestNode.wallweight === 99999999) continue ;\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) {\r\n      var temp1 = [closestNode];\r\n      visitedNodesInOrder.unshift(temp1)\r\n      return visitedNodesInOrder;\r\n    }\r\n    if (closestNode.endvisited){\r\n      var temp2 = [closestNode];\r\n      visitedNodesInOrder.unshift(temp2)\r\n      return visitedNodesInOrder;\r\n    }\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(closestNode, grid,diagonalallowed);\r\n    for (const neighbor of unvisitedNeighbors){\r\n      if (neighbor.startvisited) continue ;\r\n      if (neighbor.endvisited){\r\n        var temp3 = [neighbor];\r\n      neighbor.previousNode = closestNode;\r\n        neighbor.startvisited = true;\r\n        neighbor.distance = closestNode.distance + neighbor.wallweight;\r\n        startqueue.push(neighbor);\r\n      visitedNodesInOrder.unshift(temp3)\r\n      return visitedNodesInOrder;\r\n      }\r\n        neighbor.previousNode = closestNode;\r\n        neighbor.startvisited = true;\r\n        neighbor.distance = closestNode.distance + neighbor.wallweight;\r\n        startqueue.push(neighbor);\r\n    }\r\n\r\n    const ftNode = endqueue.shift();\r\n    if (ftNode.wallweight === 99999999) continue ;\r\n    if (ftNode.distance === Infinity) return visitedNodesInOrder;\r\n    ftNode.isVisited = true;\r\n    visitedNodesInOrder.push(ftNode);\r\n    if (ftNode === startNode) {\r\n      var temp4 = [ftNode];\r\n      visitedNodesInOrder.unshift(temp4)\r\n      return visitedNodesInOrder;\r\n    }\r\n    if (ftNode.startvisited){\r\n      var temp5 = [ftNode];\r\n      visitedNodesInOrder.unshift(temp5)\r\n      return visitedNodesInOrder;\r\n    }\r\n    const unvisitedNeighbor = getUnvisitedNeighbors(ftNode, grid,diagonalallowed);\r\n    for (const neighbora of unvisitedNeighbor){\r\n      if (neighbora.endvisited) continue ;\r\n      if (neighbora.startvisited){\r\n      var temp6 = [neighbora];\r\n      visitedNodesInOrder.unshift(temp6)\r\n      neighbora.nex = ftNode;\r\n      neighbora.endvisited = true;\r\n      neighbora.distance = ftNode.distance + neighbora.wallweight;\r\n      endqueue.push(neighbora);\r\n      return visitedNodesInOrder;\r\n    }\r\n      neighbora.nex = ftNode;\r\n      neighbora.endvisited = true;\r\n      neighbora.distance = ftNode.distance + neighbora.wallweight;\r\n      endqueue.push(neighbora);\r\n    }\r\n  }\r\n  console.log(1)\r\n  while (!!startqueue.length){\r\n    console.log(\"here2\")\r\n    const closestNode = startqueue.shift();\r\n    if (closestNode.wallweight === 99999999) continue ;\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) {\r\n      var temp1 = [closestNode];\r\n      visitedNodesInOrder.unshift(temp1)\r\n      return visitedNodesInOrder;\r\n    }\r\n    // if (closestNode.endvisited){\r\n    //   var temp2 = [closestNode];\r\n    //   visitedNodesInOrder.unshift(temp2)\r\n    //   return visitedNodesInOrder;\r\n    // }\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(closestNode, grid,diagonalallowed);\r\n    for (const neighbor of unvisitedNeighbors){\r\n      if (neighbor.startvisited) continue ;\r\n      // if (neighbor.endvisited){\r\n      //   var temp3 = [neighbor];\r\n      // neighbor.previousNode = closestNode;\r\n      //   neighbor.startvisited = true;\r\n      //   neighbor.distance = closestNode.distance + neighbor.wallweight;\r\n      //   startqueue.push(neighbor);\r\n      // visitedNodesInOrder.unshift(temp3)\r\n      // return visitedNodesInOrder;\r\n      // }\r\n        neighbor.previousNode = closestNode;\r\n        neighbor.startvisited = true;\r\n        neighbor.distance = closestNode.distance + neighbor.wallweight;\r\n        startqueue.push(neighbor);\r\n    }\r\n  }\r\n  while(!!endqueue.length){\r\n    console.log(\"here3\")\r\n    const ftNode = endqueue.shift();\r\n    if (ftNode.wallweight > 99999998) continue ;\r\n    if (ftNode.distance === Infinity) return visitedNodesInOrder;\r\n    ftNode.isVisited = true;\r\n    visitedNodesInOrder.push(ftNode);\r\n    // if (ftNode === startNode) {\r\n    //   var temp4 = [ftNode];\r\n    //   visitedNodesInOrder.unshift(temp4)\r\n    //   return visitedNodesInOrder;\r\n    // }\r\n    if (ftNode.startvisited){\r\n      var temp5 = [ftNode];\r\n      visitedNodesInOrder.unshift(temp5)\r\n      return visitedNodesInOrder;\r\n    }\r\n    const unvisitedNeighbor = getUnvisitedNeighbors(ftNode, grid,diagonalallowed);\r\n    for (const neighbora of unvisitedNeighbor){\r\n      if (neighbora.endvisited) continue ;\r\n    //   if (neighbora.startvisited){\r\n    //   var temp6 = [neighbora];\r\n    //   visitedNodesInOrder.unshift(temp6)\r\n    //   neighbora.nex = ftNode;\r\n    //   neighbora.endvisited = true;\r\n    //   neighbora.distance = ftNode.distance + neighbora.wallweight;\r\n    //   endqueue.push(neighbora);\r\n    //   return visitedNodesInOrder;\r\n    // }\r\n      neighbora.nex = ftNode;\r\n      neighbora.endvisited = true;\r\n      neighbora.distance = ftNode.distance + neighbora.wallweight;\r\n      endqueue.push(neighbora);\r\n    }\r\n  }\r\n  console.log(\"here1\")\r\n  var temp = [finishNode]\r\n  visitedNodesInOrder.unshift(temp)\r\n  return visitedNodesInOrder \r\n}\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid,diagonalallowed) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  if (diagonalallowed){\r\n    if (row > 0 && col > 0) neighbors.push(grid[row-1][col-1]);\r\n    if (row > 0 && col < grid[0].length - 1) neighbors.push(grid[row-1][col+1]);\r\n    if (row <  grid.length - 1 && col > 0 ) neighbors.push(grid[row+1][col-1]);\r\n    if (row <  grid.length - 1 && col < grid[0].length - 1) neighbors.push(grid[row+1][col+1]);\r\n    \r\n  }\r\n  return neighbors\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function bibfsans(node) {\r\n  // return [node];\r\n  var ans = []\r\n  let s = node ;  let e = node\r\n  while (s.previousNode !== null && e.nex !== null){\r\n    ans.unshift(s.previousNode);\r\n    ans.unshift(e.nex)\r\n    s = s.previousNode;\r\n    e = e.nex ;\r\n  }\r\n  while (s.previousNode !== null){\r\n    ans.unshift(s.previousNode);\r\n    s = s.previousNode;\r\n  }\r\n  while (e.nex !== null){\r\n    ans.unshift(e.nex);\r\n    e = e.nex ;\r\n  }\r\n  ans.push(node)\r\n  return ans\r\n}","//My variation of A star algorithm\r\nimport _ from \"lodash\" ;\r\nexport function BiIastar(grid, startNode, finishNode,heuristic,diagonalallowed) {\r\n    const visitedNodesInOrder = []; //closed list\r\n    const TempEnd=[];\r\n    const TempStart=[];\r\n    const tempstart = _.cloneDeep(startNode);\r\n    tempstart.distance=0;\r\n    const tempend = _.cloneDeep(finishNode);\r\n    tempend.distance=0;\r\n    TempStart.push(tempstart);\r\n    TempEnd.push(tempend);\r\n    while (TempStart.length>0 && TempEnd.length>0) {\r\n      sortNodesByDistance(TempStart);\r\n      const closestNode = TempStart.shift();\r\n      // If we encounter a wall, we skip it.\r\n      if (closestNode.isWall && closestNode.wallweight==999999) \r\n      {\r\n        continue;\r\n      }\r\n      // If the closest node is at a distance of infinity,\r\n      // we must be trapped and should therefore stop.\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.startvisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      updateUnvisitedNeighborsStart(closestNode, grid,finishNode,heuristic,diagonalallowed,TempStart,closestNode.wallweight);\r\n        if(closestNode === finishNode) \r\n        {\r\n      console.log(\"Hello\");\r\n        var temp1 = [closestNode];\r\n        visitedNodesInOrder.unshift(temp1)\r\n        return visitedNodesInOrder;\r\n        }\r\n        if (closestNode.endvisited)\r\n        {\r\n        // console.log(\"Hi\");\r\n        var temp2 = [closestNode];\r\n        visitedNodesInOrder.unshift(temp2)\r\n        return visitedNodesInOrder;\r\n        }\r\n\r\n        sortNodesByDistance(TempEnd);\r\n      const closestNode2 = TempEnd.shift();\r\n      // If we encounter a wall, we skip it.\r\n      if (closestNode2.isWall && closestNode2.wallweight==999999) continue;\r\n      // If the closest node is at a distance of infinity,\r\n      // we must be trapped and should therefore stop.\r\n      if (closestNode2.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode2.endvisited = true;\r\n      updateUnvisitedNeighborsEnd(closestNode2, grid,finishNode,heuristic,diagonalallowed,TempEnd,closestNode2.wallweight);\r\n      visitedNodesInOrder.push(closestNode2);  \r\n      if(closestNode2 === startNode) \r\n        {\r\n      console.log(\"Hello\");\r\n        var temp1 = [closestNode2];\r\n        visitedNodesInOrder.unshift(temp1)\r\n        return visitedNodesInOrder;\r\n        }\r\n        if (closestNode2.startvisited)\r\n        {\r\n        // console.log(\"Hi\");\r\n        var temp2 = [closestNode2];\r\n        visitedNodesInOrder.unshift(temp2)\r\n        return visitedNodesInOrder;\r\n        }\r\n    }\r\n    while(TempStart.length>0)\r\n    {\r\n        sortNodesByDistance(TempStart);\r\n      const closestNode = TempStart.shift();\r\n      // If we encounter a wall, we skip it.\r\n      if (closestNode.isWall && closestNode.wallweight==999999) continue;\r\n      // If the closest node is at a distance of infinity,\r\n      // we must be trapped and should therefore stop.\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.startvisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      updateUnvisitedNeighborsStart(closestNode, grid,finishNode,heuristic,diagonalallowed,TempStart,closestNode.wallweight);\r\n        if(closestNode === finishNode) \r\n        {\r\n      console.log(\"Hello\");\r\n        var temp1 = [closestNode];\r\n        visitedNodesInOrder.unshift(temp1)\r\n        return visitedNodesInOrder;\r\n        }\r\n        if (closestNode.endvisited)\r\n        {\r\n        // console.log(\"Hi\");\r\n        var temp2 = [closestNode];\r\n        visitedNodesInOrder.unshift(temp2)\r\n        return visitedNodesInOrder;\r\n        }\r\n    }\r\n    while(TempEnd.length>0)\r\n    {\r\n        sortNodesByDistance(TempEnd);\r\n        const closestNode2 = TempEnd.shift();\r\n        // If we encounter a wall, we skip it.\r\n        if (closestNode2.isWall && closestNode2.wallweight==999999) continue;\r\n        // If the closest node is at a distance of infinity,\r\n        // we must be trapped and should therefore stop.\r\n        if (closestNode2.distance === Infinity) return visitedNodesInOrder;\r\n        closestNode2.endvisited = true;\r\n        updateUnvisitedNeighborsEnd(closestNode2, grid,finishNode,heuristic,diagonalallowed,TempEnd,closestNode2.wallweight);\r\n        visitedNodesInOrder.push(closestNode2);  \r\n        if(closestNode2 === startNode) \r\n          {\r\n        console.log(\"Hello\");\r\n          var temp1 = [closestNode2];\r\n          visitedNodesInOrder.unshift(temp1)\r\n          return visitedNodesInOrder;\r\n          }\r\n          if (closestNode2.startvisited)\r\n          {\r\n          // console.log(\"Hi\");\r\n          var temp2 = [closestNode2];\r\n          visitedNodesInOrder.unshift(temp2)\r\n          return visitedNodesInOrder;\r\n          }\r\n    }\r\n}\r\n  \r\n  function sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n  \r\n  function updateUnvisitedNeighborsStart(node, grid,finishNode,heuristic,diagonalallowed,TempStart,wallweight) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid,diagonalallowed);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n        if (neighbor.startvisited) continue ;\r\n      console.log(finishNode.col);\r\n      console.log(neighbor.col);\r\n      var value;\r\n      var string=\"Manhattan\";\r\n      var string2=\"Diagonal\";\r\n      var string3=\"Euclidean\";\r\n      var string4=\"Octile\";\r\n      var string5=\"Chebyshev\";\r\n      if(heuristic.localeCompare(string)==0)\r\n      {\r\n        value=Math.abs(neighbor.row-finishNode.row)+Math.abs(neighbor.col-finishNode.col);\r\n        console.log(value);\r\n      }\r\n      else if(heuristic.localeCompare(string2)==0)\r\n      {\r\n        value=Math.max(Math.abs(neighbor.row-finishNode.row),Math.abs(neighbor.col-finishNode.col));\r\n        console.log(value);\r\n      }\r\n      else if(heuristic.localeCompare(string3)==0)\r\n      {\r\n        value=Math.sqrt(Math.pow((neighbor.row-finishNode.row),2)+Math.pow((neighbor.col-finishNode.col),2));\r\n        console.log(value);\r\n      }\r\n      else if(heuristic.localeCompare(string4)==0)\r\n      {\r\n        var x_dist=Math.abs(neighbor.row-finishNode.row);\r\n        var y_dist=Math.abs(neighbor.col-finishNode.col);\r\n        value=Math.max(x_dist,y_dist)+(Math.sqrt(2)-1) * Math.min(x_dist,y_dist);\r\n        console.log(value);\r\n      }\r\n      else if(heuristic.localeCompare(string5)==0)\r\n      {\r\n        value=Math.max(Math.abs(neighbor.row-finishNode.row),Math.abs(neighbor.col-finishNode.col));\r\n        console.log(value);\r\n      }\r\n      var temp= node.distance + wallweight*value;\r\n      neighbor.distance=temp;\r\n      neighbor.previousNode = node;\r\n          neighbor.startvisited = true;\r\n          TempStart.push(neighbor);\r\n    }\r\n  }\r\n  \r\n  function updateUnvisitedNeighborsEnd(node, grid,finishNode,heuristic,diagonalallowed,TempEnd,wallweight) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid,diagonalallowed);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n        if (neighbor.endvisited) continue ;\r\n      console.log(finishNode.col);\r\n      console.log(neighbor.col);\r\n      var value;\r\n      var string=\"Manhattan\";\r\n      var string2=\"Diagonal\";\r\n      var string3=\"Euclidean\";\r\n      var string4=\"Octile\";\r\n      var string5=\"Chebyshev\";\r\n      if(heuristic.localeCompare(string)==0)\r\n      {\r\n        value=Math.abs(neighbor.row-finishNode.row)+Math.abs(neighbor.col-finishNode.col);\r\n        console.log(value);\r\n      }\r\n      else if(heuristic.localeCompare(string2)==0)\r\n      {\r\n        value=Math.max(Math.abs(neighbor.row-finishNode.row),Math.abs(neighbor.col-finishNode.col));\r\n        console.log(value);\r\n      }\r\n      else if(heuristic.localeCompare(string3)==0)\r\n      {\r\n        value=Math.sqrt(Math.pow((neighbor.row-finishNode.row),2)+Math.pow((neighbor.col-finishNode.col),2));\r\n        console.log(value);\r\n      }\r\n      else if(heuristic.localeCompare(string4)==0)\r\n      {\r\n        var x_dist=Math.abs(neighbor.row-finishNode.row);\r\n        var y_dist=Math.abs(neighbor.col-finishNode.col);\r\n        value=Math.max(x_dist,y_dist)+(Math.sqrt(2)-1) * Math.min(x_dist,y_dist);\r\n        console.log(value);\r\n      }\r\n      else if(heuristic.localeCompare(string5)==0)\r\n      {\r\n        value=Math.max(Math.abs(neighbor.row-finishNode.row),Math.abs(neighbor.col-finishNode.col));\r\n        console.log(value);\r\n      }\r\n      var temp= node.distance + value*wallweight;\r\n      neighbor.distance=temp;\r\n      neighbor.next=node; \r\n    // neighbor.previousNode = closestNodeEnd;\r\n     neighbor.endvisited = true;\r\n     TempEnd.push(neighbor);\r\n    }\r\n  }\r\n  \r\n  function getUnvisitedNeighbors(node, grid,diagonalallowed) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    if (diagonalallowed){\r\n      if (row > 0 && col > 0) neighbors.push(grid[row-1][col-1]);\r\n      if (row > 0 && col < grid[0].length - 1) neighbors.push(grid[row-1][col+1]);\r\n      if (row <  grid.length - 1 && col > 0 ) neighbors.push(grid[row+1][col-1]);\r\n      if (row <  grid.length - 1 && col < grid[0].length - 1) neighbors.push(grid[row+1][col+1]);\r\n      \r\n    }\r\n    return neighbors;\r\n  }\r\n  \r\n  function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n  \r\n  // Backtracks from the finishNode to find the shortest path.\r\n  // Only works when called *after* the dijkstra method above.\r\n  function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }\r\n  ","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra(grid, startNode, finishNode,diagonalallowed) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (unvisitedNodes.length>0) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall && closestNode.wallweight==99999999) \r\n    {\r\n      console.log(closestNode.wallweight);\r\n      continue;\r\n    }\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid,diagonalallowed,closestNode.wallweight);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid,diagonalallowed,wallweight) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid,diagonalallowed);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + wallweight;\r\n    neighbor.previousNode = node;\r\n    neighbor.isVisited=true;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid,diagonalallowed) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  if (diagonalallowed){\r\n    if (row > 0 && col > 0) neighbors.push(grid[row-1][col-1]);\r\n    if (row > 0 && col < grid[0].length - 1) neighbors.push(grid[row-1][col+1]);\r\n    if (row <  grid.length - 1 && col > 0 ) neighbors.push(grid[row+1][col-1]);\r\n    if (row <  grid.length - 1 && col < grid[0].length - 1) neighbors.push(grid[row+1][col+1]);\r\n    \r\n  }\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","//My variation of A star algorithm\r\nexport function Iastar(grid, startNode, finishNode,heuristic,diagonalallowed) {\r\n    const visitedNodesInOrder = []; //closed list\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid); //open list\r\n    while (unvisitedNodes.length>0) {\r\n      sortNodesByDistance(unvisitedNodes);\r\n      const closestNode = unvisitedNodes.shift();\r\n      // If we encounter a wall, we skip it.\r\n      if (closestNode.isWall && closestNode.wallweight==999999)\r\n      { \r\n        continue;\r\n      }\r\n      // If the closest node is at a distance of infinity,\r\n      // we must be trapped and should therefore stop.\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid,finishNode,heuristic,diagonalallowed,closestNode.wallweight);\r\n    }\r\n  }\r\n  \r\n  function sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n  \r\n  function updateUnvisitedNeighbors(node, grid,finishNode,heuristic,diagonalallowed,wallweight) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid,diagonalallowed);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      console.log(finishNode.col);\r\n      console.log(neighbor.col);\r\n      var value;\r\n      var string=\"Manhattan\";\r\n      var string2=\"Diagonal\";\r\n      var string3=\"Euclidean\";\r\n      var string4=\"Octile\";\r\n      var string5=\"Chebyshev\";\r\n      if(heuristic.localeCompare(string)==0)\r\n      {\r\n        value=Math.abs(neighbor.row-finishNode.row)+Math.abs(neighbor.col-finishNode.col);\r\n        console.log(value);\r\n      }\r\n      else if(heuristic.localeCompare(string2)==0)\r\n      {\r\n        value=Math.max(Math.abs(neighbor.row-finishNode.row),Math.abs(neighbor.col-finishNode.col));\r\n        console.log(value);\r\n      }\r\n      else if(heuristic.localeCompare(string3)==0)\r\n      {\r\n        value=Math.sqrt(Math.pow((neighbor.row-finishNode.row),2)+Math.pow((neighbor.col-finishNode.col),2));\r\n        console.log(value);\r\n      }\r\n      else if(heuristic.localeCompare(string4)==0)\r\n      {\r\n        var x_dist=Math.abs(neighbor.row-finishNode.row);\r\n        var y_dist=Math.abs(neighbor.col-finishNode.col);\r\n        value=Math.max(x_dist,y_dist)+(Math.sqrt(2)-1) * Math.min(x_dist,y_dist);\r\n        console.log(value);\r\n      }\r\n      else if(heuristic.localeCompare(string5)==0)\r\n      {\r\n        value=Math.max(Math.abs(neighbor.row-finishNode.row),Math.abs(neighbor.col-finishNode.col));\r\n        console.log(value);\r\n      }\r\n      neighbor.distance=value*wallweight+node.distance;\r\n      neighbor.previousNode = node;\r\n      neighbor.isVisited=true;\r\n    }\r\n  }\r\n  \r\n  function getUnvisitedNeighbors(node, grid,diagonalallowed) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    if (diagonalallowed){\r\n      if (row > 0 && col > 0) neighbors.push(grid[row-1][col-1]);\r\n      if (row > 0 && col < grid[0].length - 1) neighbors.push(grid[row-1][col+1]);\r\n      if (row <  grid.length - 1 && col > 0 ) neighbors.push(grid[row+1][col-1]);\r\n      if (row <  grid.length - 1 && col < grid[0].length - 1) neighbors.push(grid[row+1][col+1]);\r\n      \r\n    }\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n  \r\n  function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n  \r\n  // Backtracks from the finishNode to find the shortest path.\r\n  // Only works when called *after* the dijkstra method above.\r\n  function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }\r\n  ","//Original implementation of Best First Search\r\nexport function IBestfs(grid, startNode, finishNode,heuristic,diagonalallowed) {\r\n    const visitedNodesInOrder = []; //closed list\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = []; //open list\r\n    unvisitedNodes.push(startNode);\r\n    while (unvisitedNodes.length>0) {\r\n      sortNodesByDistance(unvisitedNodes);\r\n      const closestNode = unvisitedNodes.shift();\r\n      // If we encounter a wall, we skip it.\r\n      if (closestNode.isWall && closestNode.wallweight==99999999) continue;\r\n      // If the closest node is at a distance of infinity,\r\n      // we must be trapped and should therefore stop.\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) \r\n      {\r\n        visitedNodesInOrder.push(closestNode);\r\n        return visitedNodesInOrder;\r\n      }   \r\n      updateUnvisitedNeighbors(closestNode, grid,finishNode,unvisitedNodes,heuristic,diagonalallowed,closestNode.wallweight);\r\n    }\r\n  }\r\n  \r\n  function sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n  \r\n  function updateUnvisitedNeighbors(node, grid,finishNode,unvisitedNodes,heuristic,diagonalallowed,wallweight) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid,diagonalallowed);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      console.log(finishNode.col);\r\n      console.log(neighbor.col);\r\n      var value;\r\n      var string=\"Manhattan\";\r\n      var string2=\"Diagonal\";\r\n      var string3=\"Euclidean\";\r\n      var string4=\"Octile\";\r\n      var string5=\"Chebyshev\";\r\n      if(heuristic.localeCompare(string)==0)\r\n      {\r\n        value=Math.abs(neighbor.row-finishNode.row)+Math.abs(neighbor.col-finishNode.col);\r\n        console.log(value);\r\n      }\r\n      else if(heuristic.localeCompare(string2)==0)\r\n      {\r\n        value=Math.max(Math.abs(neighbor.row-finishNode.row),Math.abs(neighbor.col-finishNode.col));\r\n        console.log(value);\r\n      }\r\n      else if(heuristic.localeCompare(string3)==0)\r\n      {\r\n        value=Math.sqrt(Math.pow((neighbor.row-finishNode.row),2)+Math.pow((neighbor.col-finishNode.col),2));\r\n        console.log(value);\r\n      }\r\n      else if(heuristic.localeCompare(string4)==0)\r\n      {\r\n        var x_dist=Math.abs(neighbor.row-finishNode.row);\r\n        var y_dist=Math.abs(neighbor.col-finishNode.col);\r\n        value=Math.max(x_dist,y_dist)+(Math.sqrt(2)-1) * Math.min(x_dist,y_dist);\r\n        console.log(value);\r\n      }\r\n      else if(heuristic.localeCompare(string5)==0)\r\n      {\r\n        value=Math.max(Math.abs(neighbor.row-finishNode.row),Math.abs(neighbor.col-finishNode.col));\r\n        console.log(value);\r\n      }\r\n      neighbor.distance=wallweight*value;\r\n      neighbor.previousNode = node;\r\n      neighbor.isVisited = true;\r\n      unvisitedNodes.push(neighbor);\r\n    }\r\n  }\r\n  \r\n  function getUnvisitedNeighbors(node, grid,diagonalallowed) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    if (diagonalallowed){\r\n      if (row > 0 && col > 0) neighbors.push(grid[row-1][col-1]);\r\n      if (row > 0 && col < grid[0].length - 1) neighbors.push(grid[row-1][col+1]);\r\n      if (row <  grid.length - 1 && col > 0 ) neighbors.push(grid[row+1][col-1]);\r\n      if (row <  grid.length - 1 && col < grid[0].length - 1) neighbors.push(grid[row+1][col+1]);\r\n      \r\n    }\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n  \r\n  function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n  \r\n  // Backtracks from the finishNode to find the shortest path.\r\n  // Only works when called *after* the dijkstra method above.\r\n  function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }\r\n  ","export function IDAstar(grid, startNode, finishNode,heuristic,diagonalallowed) {\r\n    var depth=1;\r\n    while(1)\r\n    {\r\n        //console.log(\"Hello\");\r\n        var i=0;\r\n        getAllNodes(grid);\r\n        const visitedNodesInOrder = [];\r\n        var unvisitedNodes = []\r\n        startNode.distance = 0;\r\n        unvisitedNodes.push(startNode);\r\n        //console.log(startNode);\r\n        //console.log(\"Pushed\");\r\n        //console.log(visitedNodesInOrder);\r\n        while(i<depth)\r\n        {\r\n            //console.log(visitedNodesInOrder);\r\n            //visitedNodesInOrder.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n            //console.log(visitedNodesInOrder);\r\n            //console.log(visitedNodesInOrder);\r\n            if(unvisitedNodes.length==0)\r\n            {\r\n                console.log(\"Path not found\");\r\n                return visitedNodesInOrder;\r\n            }\r\n            sortNodesByDistance(unvisitedNodes);\r\n            const closestNode = unvisitedNodes.shift();\r\n            if (closestNode.isWall && closestNode.wallweight==99999999) continue;\r\n            // If the closest node is at a distance of infinity,\r\n            // we must be trapped and should therefore stop.\r\n            if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n            if(closestNode === finishNode)\r\n            {\r\n                visitedNodesInOrder.push(finishNode)\r\n                return visitedNodesInOrder\r\n            }    \r\n            //console.log(closestNode);\r\n            closestNode.isVisited=true;\r\n            visitedNodesInOrder.push(closestNode);\r\n            const unvisitedNeighbors = getUnvisitedNeighbors(closestNode, grid,diagonalallowed);\r\n            //console.log(unvisitedNeighbors);\r\n            for (const neighbor of unvisitedNeighbors) {\r\n                var value;\r\n                var string=\"Manhattan\";\r\n                var string2=\"Diagonal\";\r\n                var string3=\"Euclidean\";\r\n                var string4=\"Octile\";\r\n                var string5=\"Chebyshev\";\r\n                if(heuristic.localeCompare(string)==0)\r\n                {\r\n                    value=Math.abs(neighbor.row-finishNode.row)+Math.abs(neighbor.col-finishNode.col);\r\n                    //console.log(value);\r\n                }\r\n                else if(heuristic.localeCompare(string2)==0)\r\n                {\r\n                    value=Math.max(Math.abs(neighbor.row-finishNode.row),Math.abs(neighbor.col-finishNode.col));\r\n                    //console.log(value);\r\n                }\r\n                else if(heuristic.localeCompare(string3)==0)\r\n                {\r\n                    value=Math.sqrt(Math.pow((neighbor.row-finishNode.row),2)+Math.pow((neighbor.col-finishNode.col),2));\r\n                    //console.log(value);\r\n                }\r\n                else if(heuristic.localeCompare(string4)==0)\r\n                {\r\n                    var x_dist=Math.abs(neighbor.row-finishNode.row);\r\n                    var y_dist=Math.abs(neighbor.col-finishNode.col);\r\n                    value=Math.max(x_dist,y_dist)+(Math.sqrt(2)-1) * Math.min(x_dist,y_dist);\r\n                    //console.log(value);\r\n                }\r\n                else if(heuristic.localeCompare(string5)==0)\r\n                {\r\n                    value=Math.max(Math.abs(neighbor.row-finishNode.row),Math.abs(neighbor.col-finishNode.col));\r\n                    //console.log(value);\r\n                }\r\n                neighbor.distance = value+closestNode.wallweight;\r\n                neighbor.previousNode = closestNode;\r\n                neighbor.isVisited = true;\r\n                unvisitedNodes.push(neighbor);\r\n                //console.log(neighbor);\r\n                //console.log(visitedNodesInOrder);\r\n                //console.log(depth);\r\n                if (neighbor === finishNode)\r\n                { \r\n                    visitedNodesInOrder.push(finishNode);\r\n                    return visitedNodesInOrder;\r\n                }    \r\n            }\r\n            i=i+1;\r\n        \r\n        }\r\n    depth=depth+1;\r\n    }\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        node.isVisited = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  \r\n  function getUnvisitedNeighbors(node, grid,diagonalallowed) {\r\n    const neighbors = [];\r\n    //console.log(node);\r\n    const col=node.col;\r\n    const row=node.row;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    if (diagonalallowed){\r\n        if (row > 0 && col > 0) neighbors.push(grid[row-1][col-1]);\r\n        if (row > 0 && col < grid[0].length - 1) neighbors.push(grid[row-1][col+1]);\r\n        if (row <  grid.length - 1 && col > 0 ) neighbors.push(grid[row+1][col-1]);\r\n        if (row <  grid.length - 1 && col < grid[0].length - 1) neighbors.push(grid[row+1][col+1]);\r\n        \r\n      }\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n  function sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n  \r\n  \r\n  \r\n  // Backtracks from the finishNode to find the shortest path.\r\n  // Only works when called *after* the dijkstra method above.\r\n","var Heap = require('heap');\r\nfunction heurestics(a,b,h){\r\n    if (h === 1){\r\n        // Euclidean\r\n       return Math.sqrt((b.row - a.row) ** 2 + (b.col - a.col) ** 2)\r\n    }\r\n    if (h === 2){\r\n        // Manhattan\r\n        return b.row - a.row + b.col - a.col\r\n    }\r\n    if (h === 3){\r\n        // octile\r\n        var a = Math.sqrt(2) - 1\r\n        var dx = b.row - a.row \r\n        var dy = b.col - a.col\r\n        return dx + dy + (a- 2)*Math.min(dx,dy)\r\n\r\n    }\r\n    if (h === 4){\r\n        // chebyshev\r\n        var dx = b.row - a.row \r\n        var dy = b.col - a.col\r\n        return Math.max(dx,dy)\r\n    }\r\n}\r\nfunction dblock(cX,cY,dX,dY,grid){\r\n    if (grid[cX-dX][cY].wallweight > 99999998 && grid[cX][cY-dY].wallweight > 99999998){\r\n        return true\r\n    }\r\n    return false\r\n}\r\nfunction blocked(cX,cY,dX,dY,grid){\r\n    // console.log(\"check blocked\",cX,cY,dX,dY)\r\n    if (cX + dX < 0 || cX +dX >= grid.length){\r\n        return true\r\n    }\r\n    if (cY +dY <0 || cY +dY >= grid[0].length){\r\n        return true\r\n    }\r\n    if (dX !== 0 && dY !== 0){\r\n        if (grid[cX + dX][cY].wallweight > 99999998&& grid[cX][cY+dY].wallweight > 99999998){\r\n            return true\r\n        }\r\n        if (grid[cX + dX][cY + dY].wallweight > 99999998){\r\n            return true\r\n        }\r\n    }\r\n    else{\r\n        if (dX !== 0){\r\n            if (grid[cX+dX][cY].wallweight > 99999998){\r\n                return true\r\n            }\r\n        }\r\n        else{\r\n            if (grid[cX][cY+dY].wallweight > 99999998){\r\n                return true\r\n            }\r\n        }\r\n    }\r\n    return false\r\n}\r\nfunction direction(a,b){\r\n    var dX = Math.sign(a.row-b.row)\r\n    var dY = Math.sign(a.col-b.col)\r\n    if (a.row-b.row === 0){\r\n        dX = 0\r\n    }\r\n    if (a.col-b.col === 0){\r\n        dY = 0\r\n    }\r\n    return [dX,dY]\r\n}\r\nfunction nodeNeighbors(node,parent,grid){\r\n    var neighbors = []\r\n    var cX = node.row ; var cY = node.col\r\n    if (parent == null){\r\n        var temp = [[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]]\r\n        for (var i = 0 ; i< 8 ; i++){\r\n            var r = temp[i][0]\r\n            var c = temp[i][1]\r\n            if (!blocked(cX,cY,r,c,grid)){\r\n                neighbors.push(grid[cX+r][cY+c])\r\n            }\r\n        }\r\n        return neighbors\r\n    }\r\n    var x = direction(node,parent)\r\n    var dX = x[0] ; var dY = x[1];\r\n    if (dX !== 0 && dY !== 0){\r\n        if (!blocked(cX,cY,0,dY,grid)){\r\n            neighbors.push(grid[cX][cY+dY])\r\n        }\r\n        if (!blocked(cX,cY,dX,0,grid)){\r\n            neighbors.push(grid[cX+dX][cY])\r\n        }\r\n        if ((!blocked(cX, cY, 0, dY, grid) || !blocked(cX, cY, dX, 0, grid)) && (!blocked(cX, cY, dX, dY, grid))){\r\n            neighbors.push(grid[cX+dX][cY+dY])\r\n        }\r\n        if (blocked(cX, cY, -dX, 0, grid) && !blocked(cX, cY, 0, dY, grid) && !blocked(cX, cY, -dX, dY, grid)){\r\n            neighbors.push(grid[cX-dX][cY+dY])\r\n        }\r\n        if (blocked(cX, cY, 0, -dY, grid) && !blocked(cX, cY, dX, 0, grid) && !blocked(cX, cY, dX, -dY, grid)){\r\n            neighbors.push(grid[cX+dX][cY-dY])\r\n        }\r\n    }\r\n    else{\r\n        if (dX === 0){\r\n            if (!blocked(cX, cY, dX, 0, grid)){\r\n                if (!blocked(cX, cY, 0, dY, grid)){\r\n                    neighbors.push(grid[cX][cY+dY])\r\n                }\r\n                if (blocked(cX, cY, 1, 0, grid) && !blocked(cX, cY, 1, dY, grid)){\r\n                    neighbors.push(grid[cX+1][cY+dY])\r\n                }\r\n                if (blocked(cX, cY, -1, 0, grid) && !blocked(cX, cY, -1, dY, grid)){\r\n                    neighbors.push(grid[cX-1][cY+dY])\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (!blocked(cX, cY, dX, 0, grid)){\r\n                if (!blocked(cX, cY, dX, 0, grid) && !blocked(cX, cY, dX, 0, grid)){\r\n                    neighbors.push(grid[cX+dX][cY])\r\n                }\r\n                if (blocked(cX, cY, 0, 1, grid) && !blocked(cX, cY, dX, 1, grid)){\r\n                    neighbors.push(grid[cX+dX][cY+1])\r\n                }\r\n                if (blocked(cX, cY, 0, -1, grid) && !blocked(cX, cY, dX, -1, grid)){\r\n                    neighbors.push(grid[cX+dX][dY-1])\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return neighbors\r\n}\r\nfunction identifySuccessors(node,grid,finishNode){\r\n    var successors = []\r\n    var neighbors = nodeNeighbors(node,node.previousNode,grid)\r\n    for (var i = 0; i<neighbors.length;i++){\r\n        var neighbor = neighbors[i]\r\n        if (neighbor){\r\n            console.log(neighbor)\r\n            var dX = neighbor.row - node.row\r\n            var dY = neighbor.col - node.col\r\n            var jumpPoint = jump(node.row,node.col,dX,dY,grid,finishNode)\r\n            if (jumpPoint){\r\n                successors.push(jumpPoint)\r\n            }\r\n        }\r\n    }\r\n    return successors\r\n}\r\nfunction length(curr,jumpPoint,h){\r\n    return heurestics(curr,jumpPoint,h)\r\n}\r\nfunction jump(cX,cY,dX,dY,grid,finishNode){\r\n    var nX = cX + dX; var nY = cY + dY\r\n    if (blocked(nX, nY, 0, 0, grid)){\r\n        return\r\n    }\r\n    if (grid[nX][nY] === finishNode){\r\n        return finishNode;\r\n    }\r\n    var oX = nX ; var oY = nY\r\n    if (dX !== 0 && dY !== 0){\r\n        while (true){\r\n            if ((!blocked(oX, oY, -dX, dY, grid) && blocked(oX, oY, -dX, 0, grid)) || (!blocked(oX, oY, dX, -dY, grid) && blocked(oX, oY, 0, -dY, grid))){\r\n                return grid[oX][oY]\r\n            }\r\n            if (jump(oX, oY, dX, 0, grid, finishNode) || jump(oX, oY, 0, dY, grid, finishNode)){\r\n                return grid[oX][oY]\r\n            }\r\n            oX = oX + dX;\r\n            oY = oY + dY;\r\n            if (blocked(oX, oY, 0, 0, grid)){\r\n                return\r\n            }\r\n            if (dblock(oX, oY, dX, dY, grid)){\r\n                return \r\n            }\r\n            if (grid[oX][oY] === finishNode){\r\n                return finishNode\r\n            }\r\n        }\r\n    }\r\n    else{\r\n        if (dX !== 0){\r\n            while (true){\r\n                if ((!blocked(oX, nY, dX, 1, grid) && blocked(oX, nY, 0, 1, grid)) || (!blocked(oX, nY, dX, -1, grid) && blocked(oX, nY, 0, -1, grid))){\r\n                    return grid[oX][nY]\r\n                }\r\n                oX = oX + dX\r\n                if (blocked(oX, nY, 0, 0, grid)){\r\n                    return\r\n                }\r\n                if (grid[oX][nY] === finishNode){\r\n                    return finishNode\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            while (true){\r\n                if ((!blocked(nX, oY, 1, dY, grid) && blocked(nX, oY, 1, 0, grid)) || (!blocked(nX, oY, -1, dY, grid) && blocked(nX, oY, -1, 0, grid))){\r\n                    return grid[nX][oY]\r\n                }\r\n                oY = oY + dY\r\n                if (blocked(nX, oY, 0, 0, grid)){\r\n                    return\r\n                }\r\n                if (grid[nX][oY] === finishNode){\r\n                    return finishNode\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    return jump(nX, nY, dX, dY, grid, finishNode)\r\n}\r\nexport function jps(grid,startNode,finishNode,h){\r\n    var openList = new Heap(function(nodeA, nodeB) {return nodeA.fscore - nodeB.fscore})\r\n    startNode.gscore = 0 ;\r\n    startNode.fscore = 0 ; \r\n    openList.push(startNode);\r\n    startNode.inopen = true;\r\n    const visitedNodesInOrder = [];\r\n    while (!openList.empty()){\r\n        var node = openList.pop();\r\n        node.inclosed = true;\r\n        visitedNodesInOrder.push(node)\r\n        if (node === finishNode){\r\n            return visitedNodesInOrder;\r\n        }\r\n        var successors = identifySuccessors(node,grid,finishNode);\r\n        for (var i = 0 ;i < successors.length;i++){\r\n            var successor = successors[i];\r\n            if (!successor.inclosed){\r\n                var val = node.gscore + length(node,successor,h)\r\n                if (!successor.inopen || val < successor.gscore){\r\n                    successor.gscore = val;\r\n                    successor.hscore = heurestics(successor,finishNode,h)\r\n                    successor.fscore = successor.gscore + successor.hscore*successor.wallweight\r\n                    successor.previousNode = node\r\n                    if (!successor.inopen){\r\n                        openList.push(successor)\r\n                        successor.inopen = true\r\n                    }\r\n                    else{\r\n                        openList.updateItem(successor)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return visitedNodesInOrder\r\n}\r\nexport function jpsans(finishNode,grid,h){\r\n    var curr = finishNode\r\n    const nodesInShortestPathOrder = [];\r\n    while (curr !== null){\r\n        if (curr.previousNode){\r\n            var parent = curr.previousNode\r\n            var direc = direction(curr,parent)\r\n            var dX = direc[0] ; var dY = direc[1]\r\n            if ((dX === 0 && dY !== 0)|| (dY === 0 && dX !== 0)){\r\n                if (dY === 1){\r\n                    if (parent.col < curr.col){\r\n                        for (var a = parent.col + 1 ; a<curr.col ; a++){\r\n                            nodesInShortestPathOrder.push(grid[curr.row][a])\r\n                        }\r\n                    }\r\n                    else if (parent.col > curr.col){\r\n                        for (var b = parent.col ; b > curr.col ; b--){\r\n                            nodesInShortestPathOrder.push(grid[curr.row][b])\r\n                        }\r\n                    }\r\n                }\r\n                else{\r\n                    if (parent.row < curr.row){\r\n                        for (var c = parent.row + 1 ; c<curr.row ; c++){\r\n                            nodesInShortestPathOrder.push(grid[c][curr.col])\r\n                        }\r\n                    }\r\n                    else if (parent.row > curr.row){\r\n                        for (var d = parent.row  ; d > curr.row ; d--){\r\n                            nodesInShortestPathOrder.push(grid[d][curr.col])\r\n                        }\r\n                    }\r\n                }\r\n                nodesInShortestPathOrder.push(curr);\r\n                curr = curr.previousNode;\r\n            }\r\n            else{\r\n                if (parent.row < curr.row){\r\n                    var diff = parent.col - parent.row;\r\n                    for (var j = parent.row ; j < curr.row+1 ;j++){\r\n                        nodesInShortestPathOrder.push(grid[j][j+diff])\r\n                    }\r\n                }\r\n                if (parent.row > curr.row ){\r\n                    var diff = parent.col - parent.row;\r\n                    for (var l = parent.row ; l > curr.row+1 ;l++){\r\n                        nodesInShortestPathOrder.push(grid[l][l+diff])\r\n                    }\r\n                }\r\n                curr = curr.previousNode;\r\n            }\r\n        }\r\n        else{\r\n            nodesInShortestPathOrder.push(curr)\r\n            curr = curr.previousNode\r\n        }\r\n    \r\n    }\r\n    return nodesInShortestPathOrder\r\n\r\n}\r\n\r\n","var Heap = require('heap');\r\nfunction heurestics(a,b,h){\r\n    if (h === 1){\r\n        // Euclidean\r\n       return Math.sqrt((b.row - a.row) ** 2 + (b.col - a.col) ** 2)\r\n    }\r\n    if (h === 2){\r\n        // Manhattan\r\n        return b.row - a.row + b.col - a.col\r\n    }\r\n    if (h === 3){\r\n        // octile\r\n        var a = Math.sqrt(2) - 1\r\n        var dx = b.row - a.row \r\n        var dy = b.col - a.col\r\n        return dx + dy + (a- 2)*Math.min(dx,dy)\r\n\r\n    }\r\n    if (h === 4){\r\n        // chebyshev\r\n        var dx = b.row - a.row \r\n        var dy = b.col - a.col\r\n        return Math.max(dx,dy)\r\n    }\r\n}\r\nfunction dblock(cX,cY,dX,dY,grid){\r\n    if (grid[cX-dX][cY].wallweight > 99999998 && grid[cX][cY-dY].wallweight > 99999998){\r\n        return true\r\n    }\r\n    return false\r\n}\r\nfunction blocked(cX,cY,dX,dY,grid){\r\n    // console.log(\"check blocked\",cX,cY,dX,dY)\r\n    if (cX + dX < 0 || cX +dX >= grid.length){\r\n        return true\r\n    }\r\n    if (cY +dY <0 || cY +dY >= grid[0].length){\r\n        return true\r\n    }\r\n    if (dX !== 0 && dY !== 0){\r\n        if (grid[cX + dX][cY].wallweight > 99999998 && grid[cX][cY+dY].wallweight > 99999998){\r\n            return true\r\n        }\r\n        if (grid[cX + dX][cY + dY].wallweight > 99999998){\r\n            return true\r\n        }\r\n    }\r\n    else{\r\n        if (dX !== 0){\r\n            if (grid[cX+dX][cY].wallweight > 99999998){\r\n                return true\r\n            }\r\n        }\r\n        else{\r\n            if (grid[cX][cY+dY].wallweight > 99999998){\r\n                return true\r\n            }\r\n        }\r\n    }\r\n    return false\r\n}\r\nfunction direction(a,b){\r\n    var dX = Math.sign(a.row-b.row)\r\n    var dY = Math.sign(a.col-b.col)\r\n    if (a.row-b.row === 0){\r\n        dX = 0\r\n    }\r\n    if (a.col-b.col === 0){\r\n        dY = 0\r\n    }\r\n    return [dX,dY]\r\n}\r\nfunction nodeNeighbors(node,parent,grid){\r\n    var neighbors = []\r\n    var cX = node.row ; var cY = node.col\r\n    if (parent == null){\r\n        var temp = [[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]]\r\n        for (var i = 0 ; i< 8 ; i++){\r\n            var r = temp[i][0]\r\n            var c = temp[i][1]\r\n            if (!blocked(cX,cY,r,c,grid)){\r\n                neighbors.push(grid[cX+r][cY+c])\r\n            }\r\n        }\r\n        return neighbors\r\n    }\r\n    var x = direction(node,parent)\r\n    var dX = x[0] ; var dY = x[1];\r\n    if (dX !== 0 && dY !== 0){\r\n        if (!blocked(cX,cY,0,dY,grid)){\r\n            neighbors.push(grid[cX][cY+dY])\r\n        }\r\n        if (!blocked(cX,cY,dX,0,grid)){\r\n            neighbors.push(grid[cX+dX][cY])\r\n        }\r\n        if ((!blocked(cX, cY, 0, dY, grid) || !blocked(cX, cY, dX, 0, grid)) && (!blocked(cX, cY, dX, dY, grid))){\r\n            neighbors.push(grid[cX+dX][cY+dY])\r\n        }\r\n        if (blocked(cX, cY, -dX, 0, grid) && !blocked(cX, cY, 0, dY, grid) && !blocked(cX, cY, -dX, dY, grid)){\r\n            neighbors.push(grid[cX-dX][cY+dY])\r\n        }\r\n        if (blocked(cX, cY, 0, -dY, grid) && !blocked(cX, cY, dX, 0, grid) && !blocked(cX, cY, dX, -dY, grid)){\r\n            neighbors.push(grid[cX+dX][cY-dY])\r\n        }\r\n    }\r\n    else{\r\n        if (dX === 0){\r\n            if (!blocked(cX, cY, dX, 0, grid)){\r\n                if (!blocked(cX, cY, 0, dY, grid)){\r\n                    neighbors.push(grid[cX][cY+dY])\r\n                }\r\n                if (blocked(cX, cY, 1, 0, grid) && !blocked(cX, cY, 1, dY, grid)){\r\n                    neighbors.push(grid[cX+1][cY+dY])\r\n                }\r\n                if (blocked(cX, cY, -1, 0, grid) && !blocked(cX, cY, -1, dY, grid)){\r\n                    neighbors.push(grid[cX-1][cY+dY])\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if (!blocked(cX, cY, dX, 0, grid)){\r\n                if (!blocked(cX, cY, dX, 0, grid) && !blocked(cX, cY, dX, 0, grid)){\r\n                    neighbors.push(grid[cX+dX][cY])\r\n                }\r\n                if (blocked(cX, cY, 0, 1, grid) && !blocked(cX, cY, dX, 1, grid)){\r\n                    neighbors.push(grid[cX+dX][cY+1])\r\n                }\r\n                if (blocked(cX, cY, 0, -1, grid) && !blocked(cX, cY, dX, -1, grid)){\r\n                    neighbors.push(grid[cX+dX][dY-1])\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return neighbors\r\n}\r\nfunction identifySuccessors(node,grid,finishNode){\r\n    var successors = []\r\n    var neighbors = nodeNeighbors(node,node.previousNode,grid)\r\n    for (var i = 0; i<neighbors.length;i++){\r\n        var neighbor = neighbors[i]\r\n        if (neighbor){\r\n            // console.log(neighbor)\r\n            var dX = neighbor.row - node.row\r\n            var dY = neighbor.col - node.col\r\n            var jumpPoint = jump(node.row,node.col,dX,dY,grid,finishNode)\r\n            if (jumpPoint){\r\n                successors.push(jumpPoint)\r\n            }\r\n        }\r\n    }\r\n    return successors\r\n}\r\nfunction length(curr,jumpPoint,h){\r\n    return heurestics(curr,jumpPoint,h)\r\n}\r\nfunction jump(cX,cY,dX,dY,grid,finishNode,h){\r\n    var nX = cX + dX; var nY = cY + dY\r\n    if (blocked(nX, nY, 0, 0, grid)){\r\n        return\r\n    }\r\n    if (grid[nX][nY] === finishNode){\r\n        return finishNode;\r\n    }\r\n    var oX = nX ; var oY = nY\r\n    if (dX !== 0 && dY !== 0){\r\n        while (true){\r\n            if ((!blocked(oX, oY, -dX, dY, grid) && blocked(oX, oY, -dX, 0, grid)) || (!blocked(oX, oY, dX, -dY, grid) && blocked(oX, oY, 0, -dY, grid))){\r\n                return grid[oX][oY]\r\n            }\r\n            if (jump(oX, oY, dX, 0, grid, finishNode) || jump(oX, oY, 0, dY, grid, finishNode)){\r\n                return grid[oX][oY]\r\n            }\r\n            oX = oX + dX;\r\n            oY = oY + dY;\r\n            if (blocked(oX, oY, 0, 0, grid)){\r\n                return\r\n            }\r\n            if (dblock(oX, oY, dX, dY, grid)){\r\n                return \r\n            }\r\n            if (grid[oX][oY] === finishNode){\r\n                return finishNode\r\n            }\r\n        }\r\n    }\r\n    else{\r\n        if (dX !== 0){\r\n            while (true){\r\n                if ((!blocked(oX, nY, dX, 1, grid) && blocked(oX, nY, 0, 1, grid)) || (!blocked(oX, nY, dX, -1, grid) && blocked(oX, nY, 0, -1, grid))){\r\n                    return grid[oX][nY]\r\n                }\r\n                oX = oX + dX\r\n                if (blocked(oX, nY, 0, 0, grid)){\r\n                    return\r\n                }\r\n                if (grid[oX][nY] === finishNode){\r\n                    return finishNode\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            while (true){\r\n                if ((!blocked(nX, oY, 1, dY, grid) && blocked(nX, oY, 1, 0, grid)) || (!blocked(nX, oY, -1, dY, grid) && blocked(nX, oY, -1, 0, grid))){\r\n                    return grid[nX][oY]\r\n                }\r\n                oY = oY + dY\r\n                if (blocked(nX, oY, 0, 0, grid)){\r\n                    return\r\n                }\r\n                if (grid[nX][oY] === finishNode){\r\n                    return finishNode\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    return jump(nX, nY, dX, dY, grid, finishNode)\r\n}\r\nexport function orthJPS(grid,startNode,finishNode,h){\r\n    var openList = new Heap(function(nodeA, nodeB) {return nodeA.fscore - nodeB.fscore})\r\n    startNode.gscore = 0 ;\r\n    startNode.fscore = 0 ; \r\n    openList.push(startNode);\r\n    startNode.inopen = true;\r\n    const visitedNodesInOrder = [];\r\n    while (!openList.empty()){\r\n        var node = openList.pop();\r\n        node.inclosed = true;\r\n        visitedNodesInOrder.push(node)\r\n        if (node === finishNode){\r\n            console.log(\"We have successfully found a path\")\r\n            return visitedNodesInOrder;\r\n        }\r\n        var successors = identifySuccessors(node,grid,finishNode);\r\n        for (var i = 0 ;i < successors.length;i++){\r\n            var successor = successors[i];\r\n            if (!successor.inclosed){\r\n                var val = node.gscore + length(node,successor,h)\r\n                if (!successor.inopen || val < successor.gscore){\r\n                    successor.gscore = val;\r\n                    successor.hscore = heurestics(successor,finishNode,h)\r\n                    successor.fscore = successor.gscore + successor.hscore*successor.wallweight\r\n                    successor.previousNode = node\r\n                    if (!successor.inopen){\r\n                        openList.push(successor)\r\n                        successor.inopen = true\r\n                    }\r\n                    else{\r\n                        openList.updateItem(successor)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return visitedNodesInOrder\r\n}\r\nexport function orthogonalans(finishNode,grid){\r\n    var curr = finishNode\r\n    const nodesInShortestPathOrder = [];\r\n    while (curr !== null){\r\n        if (curr.previousNode){\r\n            var parent = curr.previousNode\r\n            var direc = direction(curr,parent)\r\n            var dX = direc[0] ; var dY = direc[1]\r\n            if ((dX === 0 && dY !== 0)|| (dY === 0 && dX !== 0)){\r\n                if (dY === 1){\r\n                    if (parent.col < curr.col){\r\n                        for (var a = parent.col + 1 ; a<curr.col ; a++){\r\n                            nodesInShortestPathOrder.push(grid[curr.row][a])\r\n                        }\r\n                    }\r\n                    else if (parent.col > curr.col){\r\n                        for (var b = parent.col ; b > curr.col ; b--){\r\n                            nodesInShortestPathOrder.push(grid[curr.row][b])\r\n                        }\r\n                    }\r\n                }\r\n                else{\r\n                    if (parent.row < curr.row){\r\n                        for (var c = parent.row + 1 ; c<curr.row ; c++){\r\n                            nodesInShortestPathOrder.push(grid[c][curr.col])\r\n                        }\r\n                    }\r\n                    else if (parent.row > curr.row){\r\n                        for (var d = parent.row  ; d > curr.row ; d--){\r\n                            nodesInShortestPathOrder.push(grid[d][curr.col])\r\n                        }\r\n                    }\r\n                }\r\n                nodesInShortestPathOrder.push(curr);\r\n                curr = curr.previousNode;\r\n            }\r\n            else{\r\n                var xcord = curr.row ; var ycord = parent.col;\r\n                if (parent.row < curr.row){\r\n                    for (var j = parent.row+1 ; j < xcord+1;j++){\r\n                        nodesInShortestPathOrder.push(grid[j][ycord]);\r\n                    }\r\n                }\r\n                else if (parent.row > curr.row){\r\n                    for (var k = parent.row-1 ; k>xcord +1;k--){\r\n                        nodesInShortestPathOrder.push(grid[k][ycord])\r\n                    }\r\n                }\r\n                if (parent.col < curr.col){\r\n                    for (var l = parent.col+1;l < curr.col ; l++){\r\n                        nodesInShortestPathOrder.push(grid[xcord][l])\r\n                    }\r\n                }\r\n                else if (parent.col > curr.col){\r\n                    for (var m = parent.col-1; m> curr.col ;m--){\r\n                        nodesInShortestPathOrder.push(grid[xcord][m])\r\n                    }\r\n                }\r\n                nodesInShortestPathOrder.push(curr);\r\n                curr = curr.previousNode;\r\n            }\r\n        }\r\n        else{\r\n            nodesInShortestPathOrder.push(curr)\r\n            curr = curr.previousNode\r\n        }\r\n    }\r\n    return nodesInShortestPathOrder\r\n\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      isWallweight,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : isWallweight\r\n      ? \"node-wallweight\"\r\n      : \"\";\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Astar } from \"../algorithms/astar\";\r\nimport { Bestfs } from \"../algorithms/Bestfs\";\r\nimport { bfs } from \"../algorithms/bfs\";\r\nimport { bidfsans, bidijkstra } from \"../algorithms/bi-dijkstra\";\r\nimport { BiAstar } from \"../algorithms/biastar\";\r\nimport { BiBestfs } from \"../algorithms/BiBestfs\";\r\nimport { bbfs, bibfsans } from \"../algorithms/bibfs\";\r\nimport { BiIastar } from \"../algorithms/BiIastar\";\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\r\nimport { Iastar } from \"../algorithms/Iastar\";\r\nimport { IBestfs } from \"../algorithms/IBestfs\";\r\nimport { IDAstar } from \"../algorithms/IDAstar_new\";\r\nimport { jps, jpsans } from \"../algorithms/jps\";\r\nimport { orthJPS, orthogonalans } from \"../algorithms/orthJPS\";\r\nimport img1 from \"../images/marsmap1k.jpg\";\r\nimport Node from \"./Node\";\r\nimport \"./PathfindingVisualizer.css\";\r\n\r\nconst START_NODE_ROW = 0;\r\nconst START_NODE_COL = 15;\r\nconst FINISH_NODE_ROW = 10;\r\nconst FINISH_NODE_COL = 40;\r\nconst t_rows = 20;\r\nconst t_cols = 50;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      wallweight: 99999999,\r\n      mouseIsPressed: false,\r\n      fin: false,\r\n      inf: false,\r\n      pause: false,\r\n    };\r\n    this.handleOptionChangefinite = this.handleOptionChangefinite.bind(this);\r\n    this.handleOptionChangeinfinite = this.handleOptionChangeinfinite.bind(\r\n      this\r\n    );\r\n    // this.handleCheckfinite = this.handleCheckfinite.bind(this);\r\n    this.handleChange2 = this.handleChange2.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleOptionChangefinite(event) {\r\n    if (!this.state.fin) {\r\n      this.state.fin = true;\r\n      this.state.wallweight = parseInt(\r\n        prompt(\"Please enter the value of wall weight\")\r\n      );\r\n      if (!this.state.wallweight) {\r\n        this.state.wallweight = 99999999;\r\n      }\r\n    }\r\n\r\n    console.log(this.state.wallweight);\r\n  }\r\n  handleOptionChangeinfinite(event) {\r\n    if (this.state.fin) {\r\n      this.state.fin = false;\r\n      this.state.wallweight = 99999999;\r\n    }\r\n    console.log(this.state.wallweight);\r\n  }\r\n  handleChange2(event) {\r\n    console.log(\"getting weighted wall\");\r\n    this.setState({ wallweight: event.target.value });\r\n  }\r\n  handleSubmit(event) {\r\n    alert(\"A name was submitted: \" + this.state.wallweight);\r\n    event.preventDefault();\r\n  }\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n    document.body.style.backgroundImage = `url(${img1})`;\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(\r\n      this.state.grid,\r\n      row,\r\n      col,\r\n      this.state.wallweight,\r\n      this.state.fin\r\n    );\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(\r\n      this.state.grid,\r\n      row,\r\n      col,\r\n      this.state.wallweight,\r\n      this.state.fin\r\n    );\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\r\n      console.log(this.state.pause);\r\n\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n\r\n      if (\r\n        visitedNodesInOrder[i].isWall == false &&\r\n        visitedNodesInOrder[i].isWallweight == false\r\n      ) {\r\n        setTimeout(() => {\r\n          const node = visitedNodesInOrder[i];\r\n          if (!node.isStart && !node.isFinish) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              \"node node-visited\";\r\n          }\r\n        }, 10 * i);\r\n      }\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 1; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        if (!node.isStart && !node.isFinish) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-shortest-path\";\r\n        }\r\n      }, 50 * i);\r\n    }\r\n  }\r\n  visualizeOrthAstar() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = Astar(grid, startNode, finishNode, 4, false);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n  visualizeAstar() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = Astar(grid, startNode, finishNode, 4, true);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n  visualizeBiAstarWithDiagonals() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = BiAstar(grid, startNode, finishNode, 1, true);\r\n    const n = visitedNodesInOrder.shift();\r\n    console.log(n[0].nex);\r\n    console.log(n[0].previousNode);\r\n    const nodesInShortestPathOrder = bibfsans(n[0]);\r\n    this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n  visualizeBiAstarNodiagoanls() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = BiAstar(grid, startNode, finishNode, 1, false);\r\n    const n = visitedNodesInOrder.shift();\r\n    console.log(n[0].nex);\r\n    console.log(n[0].previousNode);\r\n    const nodesInShortestPathOrder = bibfsans(n[0]);\r\n    this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n  visualizeJPS() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = jps(grid, startNode, finishNode, 4);\r\n    const nodesInShortestPathOrder = jpsans(finishNode, grid);\r\n    this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n  visualizeBFS() {\r\n    console.log(this.state.wallweight);\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = bfs(grid, startNode, finishNode, false);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n  visualizeBBFS() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = bbfs(grid, startNode, finishNode, false);\r\n    const n = visitedNodesInOrder.shift();\r\n    //const nodesInShortestPathOrder = getNodesInShortestPathOrder(n[0]);\r\n    const nodesInShortestPathOrder = bibfsans(n[0]);\r\n    this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n  visualizeBDBFS() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = bbfs(grid, startNode, finishNode, true);\r\n    const n = visitedNodesInOrder.shift();\r\n    //const nodesInShortestPathOrder = getNodesInShortestPathOrder(n[0]);\r\n    const nodesInShortestPathOrder = bibfsans(n[0]);\r\n    this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n  visualizeBFSwithdiagonals() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = bfs(grid, startNode, finishNode, true);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n  visualizeOrthJPS() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = orthJPS(grid, startNode, finishNode, 4);\r\n    const nodesInShortestPathOrder = orthogonalans(finishNode, grid);\r\n    this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  //shreeya\r\n  visualizeDijkstra() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    var diagonalallowed = false;\r\n    const visitedNodesInOrder = dijkstra(\r\n      grid,\r\n      startNode,\r\n      finishNode,\r\n      diagonalallowed\r\n    );\r\n    if (visitedNodesInOrder) {\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      console.log(visitedNodesInOrder);\r\n      console.log(nodesInShortestPathOrder);\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    } else {\r\n      console.log(\"Path Blocked\");\r\n    }\r\n  }\r\n  visualizeIntelligentAstar() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    var heuristic = \"Manhattan\";\r\n    var diagonalallowed = false;\r\n    const visitedNodesInOrder = Iastar(\r\n      grid,\r\n      startNode,\r\n      finishNode,\r\n      heuristic,\r\n      diagonalallowed\r\n    );\r\n    if (visitedNodesInOrder) {\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      console.log(visitedNodesInOrder);\r\n      console.log(nodesInShortestPathOrder);\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    } else {\r\n      console.log(\"Path Blocked\");\r\n    }\r\n  }\r\n  visualizeBiIntelligentAstar() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    var heuristic = \"Manhattan\";\r\n    var diagonalallowed = false;\r\n    const visitedNodesInOrder = BiIastar(\r\n      grid,\r\n      startNode,\r\n      finishNode,\r\n      heuristic,\r\n      diagonalallowed\r\n    );\r\n    if (visitedNodesInOrder) {\r\n      console.log(visitedNodesInOrder);\r\n      const ans = visitedNodesInOrder.shift();\r\n      console.log(ans);\r\n      console.log(ans[0]);\r\n      const tempo = grid[ans[0].row][ans[0].col];\r\n      const nodesInShortestPathOrder = bidfsans(tempo);\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    } else {\r\n      console.log(\"Path Blocked\");\r\n    }\r\n  }\r\n  visualizeBestfs() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    var heuristic = \"Diagonal\";\r\n    var diagonalallowed = false;\r\n    const visitedNodesInOrder = Bestfs(\r\n      grid,\r\n      startNode,\r\n      finishNode,\r\n      heuristic,\r\n      diagonalallowed\r\n    );\r\n    if (visitedNodesInOrder) {\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      console.log(visitedNodesInOrder);\r\n      console.log(nodesInShortestPathOrder);\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    } else {\r\n      console.log(\"Path Blocked\");\r\n    }\r\n  }\r\n  visualizeIBestfs() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    var heuristic = \"Diagonal\";\r\n    var diagonalallowed = false;\r\n    const visitedNodesInOrder = IBestfs(\r\n      grid,\r\n      startNode,\r\n      finishNode,\r\n      heuristic,\r\n      diagonalallowed\r\n    );\r\n    if (visitedNodesInOrder) {\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      console.log(visitedNodesInOrder);\r\n      console.log(nodesInShortestPathOrder);\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    } else {\r\n      console.log(\"Path Blocked\");\r\n    }\r\n  }\r\n  visualizeBiDijkstra() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    var diagonalallowed = false;\r\n    const visitedNodesInOrder = bidijkstra(\r\n      grid,\r\n      startNode,\r\n      finishNode,\r\n      diagonalallowed\r\n    );\r\n    if (visitedNodesInOrder) {\r\n      console.log(visitedNodesInOrder);\r\n      const ans = visitedNodesInOrder.shift();\r\n      console.log(ans);\r\n      console.log(ans[0]);\r\n      const tempo = grid[ans[0].row][ans[0].col];\r\n      const nodesInShortestPathOrder = bidfsans(tempo);\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    } else {\r\n      console.log(\"Path Blocked\");\r\n    }\r\n  }\r\n\r\n  visualizeBiBestfs() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    var heuristic = \"Octile\";\r\n    var diagonalallowed = false;\r\n    const visitedNodesInOrder = BiBestfs(\r\n      grid,\r\n      startNode,\r\n      finishNode,\r\n      heuristic,\r\n      diagonalallowed\r\n    );\r\n    if (visitedNodesInOrder) {\r\n      console.log(visitedNodesInOrder);\r\n      const ans = visitedNodesInOrder.shift();\r\n      console.log(ans);\r\n      console.log(ans[0]);\r\n      const tempo = grid[ans[0].row][ans[0].col];\r\n      const nodesInShortestPathOrder = bidfsans(tempo);\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    } else {\r\n      console.log(\"Path Blocked\");\r\n    }\r\n  }\r\n  visualizeIDAstar() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    var heuristic = \"Octile\";\r\n    var diagonalallowed = false;\r\n    const visitedNodesInOrder = IDAstar(\r\n      grid,\r\n      startNode,\r\n      finishNode,\r\n      heuristic,\r\n      diagonalallowed\r\n    );\r\n    if (visitedNodesInOrder) {\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      console.log(visitedNodesInOrder);\r\n      console.log(nodesInShortestPathOrder);\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    } else {\r\n      console.log(\"Path Blocked\");\r\n    }\r\n  }\r\n  visualizeDijkstraDiag() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    var diagonalallowed = true;\r\n    const visitedNodesInOrder = dijkstra(\r\n      grid,\r\n      startNode,\r\n      finishNode,\r\n      diagonalallowed\r\n    );\r\n    if (visitedNodesInOrder) {\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      console.log(visitedNodesInOrder);\r\n      console.log(nodesInShortestPathOrder);\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    } else {\r\n      console.log(\"Path Blocked\");\r\n    }\r\n  }\r\n  visualizeIntelligentAstarDiag() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    var heuristic = \"Manhattan\";\r\n    var diagonalallowed = true;\r\n    const visitedNodesInOrder = Iastar(\r\n      grid,\r\n      startNode,\r\n      finishNode,\r\n      heuristic,\r\n      diagonalallowed\r\n    );\r\n    if (visitedNodesInOrder) {\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      console.log(visitedNodesInOrder);\r\n      console.log(nodesInShortestPathOrder);\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    } else {\r\n      console.log(\"Path Blocked\");\r\n    }\r\n  }\r\n  visualizeBiIntelligentAstarDiag() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    var heuristic = \"Manhattan\";\r\n    var diagonalallowed = true;\r\n    const visitedNodesInOrder = BiIastar(\r\n      grid,\r\n      startNode,\r\n      finishNode,\r\n      heuristic,\r\n      diagonalallowed\r\n    );\r\n    if (visitedNodesInOrder) {\r\n      console.log(visitedNodesInOrder);\r\n      const ans = visitedNodesInOrder.shift();\r\n      console.log(ans);\r\n      console.log(ans[0]);\r\n      const tempo = grid[ans[0].row][ans[0].col];\r\n      const nodesInShortestPathOrder = bidfsans(tempo);\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    } else {\r\n      console.log(\"Path Blocked\");\r\n    }\r\n  }\r\n  visualizeBestfsDiag() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    var heuristic = \"Diagonal\";\r\n    var diagonalallowed = true;\r\n    const visitedNodesInOrder = Bestfs(\r\n      grid,\r\n      startNode,\r\n      finishNode,\r\n      heuristic,\r\n      diagonalallowed\r\n    );\r\n    if (visitedNodesInOrder) {\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      console.log(visitedNodesInOrder);\r\n      console.log(nodesInShortestPathOrder);\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    } else {\r\n      console.log(\"Path Blocked\");\r\n    }\r\n  }\r\n  visualizeIBestfsDiag() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    var heuristic = \"Diagonal\";\r\n    var diagonalallowed = true;\r\n    const visitedNodesInOrder = IBestfs(\r\n      grid,\r\n      startNode,\r\n      finishNode,\r\n      heuristic,\r\n      diagonalallowed\r\n    );\r\n    if (visitedNodesInOrder) {\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      console.log(visitedNodesInOrder);\r\n      console.log(nodesInShortestPathOrder);\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    } else {\r\n      console.log(\"Path Blocked\");\r\n    }\r\n  }\r\n  visualizeBiDijkstraDiag() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    var diagonalallowed = true;\r\n    const visitedNodesInOrder = bidijkstra(\r\n      grid,\r\n      startNode,\r\n      finishNode,\r\n      diagonalallowed\r\n    );\r\n    if (visitedNodesInOrder) {\r\n      console.log(visitedNodesInOrder);\r\n      const ans = visitedNodesInOrder.shift();\r\n      console.log(ans);\r\n      console.log(ans[0]);\r\n      const tempo = grid[ans[0].row][ans[0].col];\r\n      const nodesInShortestPathOrder = bidfsans(tempo);\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    } else {\r\n      console.log(\"Path Blocked\");\r\n    }\r\n  }\r\n\r\n  visualizeBiBestfsDiag() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    var heuristic = \"Octile\";\r\n    var diagonalallowed = true;\r\n    const visitedNodesInOrder = BiBestfs(\r\n      grid,\r\n      startNode,\r\n      finishNode,\r\n      heuristic,\r\n      diagonalallowed\r\n    );\r\n    if (visitedNodesInOrder) {\r\n      console.log(visitedNodesInOrder);\r\n      const ans = visitedNodesInOrder.shift();\r\n      console.log(ans);\r\n      console.log(ans[0]);\r\n      const tempo = grid[ans[0].row][ans[0].col];\r\n      const nodesInShortestPathOrder = bidfsans(tempo);\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    } else {\r\n      console.log(\"Path Blocked\");\r\n    }\r\n  }\r\n  visualizeIDAstarDiag() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    var heuristic = \"Octile\";\r\n    var diagonalallowed = true;\r\n    const visitedNodesInOrder = IDAstar(\r\n      grid,\r\n      startNode,\r\n      finishNode,\r\n      heuristic,\r\n      diagonalallowed\r\n    );\r\n    if (visitedNodesInOrder) {\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      console.log(visitedNodesInOrder);\r\n      console.log(nodesInShortestPathOrder);\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    } else {\r\n      console.log(\"Path Blocked\");\r\n    }\r\n  }\r\n  clearwall() {\r\n    const grid1 = this.state.grid;\r\n    for (let row = 0; row < t_rows; row++) {\r\n      for (let col = 0; col < t_cols; col++) {\r\n        const node = grid1[row][col];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node\";\r\n      }\r\n    }\r\n\r\n    const node = grid1[START_NODE_ROW][START_NODE_COL];\r\n    document.getElementById(`node-${node.row}-${node.col}`).className =\r\n      \"node node-start\";\r\n    const node1 = grid1[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    document.getElementById(`node-${node1.row}-${node1.col}`).className =\r\n      \"node node-finish\";\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  pauseSearch() {\r\n    let bool1 = this.state.pause;\r\n    bool1 = true;\r\n    this.setState({ pause: bool1 });\r\n  }\r\n\r\n  clearPath() {\r\n    console.log(\"calling clear path\");\r\n    const grid1 = this.state.grid;\r\n\r\n    for (let row = 0; row < t_rows; row++) {\r\n      for (let col = 0; col < t_cols; col++) {\r\n        let node = grid1[row][col];\r\n\r\n        if (!node.isWall && !node.isWallweight) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node\";\r\n        } else if (node.isWallweight) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-wallweight\";\r\n        }\r\n        node.distance = Infinity;\r\n        node.previousNode = null;\r\n        node.next = null;\r\n        node.nex = null;\r\n        node.gscore = Infinity;\r\n        node.hscore = Infinity;\r\n        node.fscore = Infinity;\r\n        node.inclosed = false;\r\n        node.inopen = false;\r\n        node.startvisited = false;\r\n        node.endvisited = false;\r\n        node.isVisited = false;\r\n      }\r\n    }\r\n    const node = grid1[START_NODE_ROW][START_NODE_COL];\r\n    document.getElementById(`node-${node.row}-${node.col}`).className =\r\n      \"node node-start\";\r\n    const node1 = grid1[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    document.getElementById(`node-${node1.row}-${node1.col}`).className =\r\n      \"node node-finish\";\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed, fin } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className=\"button-wrapper2\">\r\n          <div className=\"button2\">SELECT ALGORITHM</div>\r\n          {/* <div class=\"testf\"> */}\r\n          <div class=\"buttf2\" tabindex=\"1\">\r\n            <div class=\"buttf\">\r\n              <div class=\"buttonfi\">\r\n                <a>Dijkstra Algorithm</a>\r\n              </div>\r\n              <div class=\"optf\">\r\n                <li onClick={() => this.visualizeDijkstra()}>Dijkstra</li>\r\n                <li onClick={() => this.visualizeBiDijkstra()}>\r\n                  Bi-directional\r\n                </li>\r\n                <li onClick={() => this.visualizeDijkstraDiag()}>Digonal</li>\r\n                <li onClick={() => this.visualizeBiDijkstraDiag()}>\r\n                  BiDir+diagonal\r\n                </li>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"buttf2\" tabindex=\"1\">\r\n            <div class=\"buttf\">\r\n              <div class=\"buttonfi\">\r\n                <a>BFS Algorithm</a>\r\n              </div>\r\n              <div class=\"optf\">\r\n                <li onClick={() => this.visualizeBFS()}>BFS</li>\r\n                <li onClick={() => this.visualizeBBFS()}>Bi-directional</li>\r\n                <li onClick={() => this.visualizeBFSwithdiagonals()}>\r\n                  Diagonal\r\n                </li>\r\n                <li onClick={() => this.visualizeBDBFS()}>BiDir+diagonal</li>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"buttf2\" tabindex=\"1\">\r\n            <div class=\"buttf\">\r\n              <div class=\"buttonfi\">\r\n                <a>Intelligent A-Star Algorithm</a>\r\n              </div>\r\n              <div class=\"optf\">\r\n                <li onClick={() => this.visualizeIntelligentAstar()}>A-Star</li>\r\n                <li onClick={() => this.visualizeBiIntelligentAstar()}>\r\n                  Bi-Directional\r\n                </li>\r\n                <li onClick={() => this.visualizeIntelligentAstarDiag()}>\r\n                  Diagonal\r\n                </li>\r\n                <li onClick={() => this.visualizeBiIntelligentAstarDiag()}>\r\n                  BiDir+diagonal\r\n                </li>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"buttf2\" tabindex=\"1\">\r\n            <div class=\"buttf\">\r\n              <div class=\"buttonfi\">\r\n                <a>A-Star Algorithm</a>\r\n              </div>\r\n              <div class=\"optf\">\r\n                <li onClick={() => this.visualizeAstar()}>A-Star</li>\r\n                <li onClick={() => this.visualizeBiAstarNodiagoanls()}>\r\n                  Bi-directional\r\n                </li>\r\n                <li onClick={() => this.visualizeOrthAstar()}>Orthogal</li>\r\n                <li onClick={() => this.visualizeBiAstarWithDiagonals()}>\r\n                  Bidir+Diagonal\r\n                </li>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"buttf2\" tabindex=\"1\">\r\n            <div class=\"buttf\">\r\n              <div class=\"buttonfi\">\r\n                <a>Best first Search</a>\r\n              </div>\r\n              <div class=\"optf\">\r\n                <li onClick={() => this.visualizeBestfs()}>Bestfs</li>\r\n                <li onClick={() => this.visualizeBiBestfs()}>Bi-directional</li>\r\n                <li onClick={() => this.visualizeBestfsDiag()}>Diagonal</li>\r\n                <li onClick={() => this.visualizeBiBestfsDiag()}>\r\n                  BiDir+diagonal\r\n                </li>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"buttf2\" tabindex=\"1\">\r\n            <div class=\"buttf\">\r\n              <div class=\"buttonfi\">\r\n                <a>Intelligent Best first Search</a>\r\n              </div>\r\n              <div class=\"optf\">\r\n                <li onClick={() => this.visualizeIBestfs()}>option1</li>\r\n                <li onClick={() => this.visualizeBiBestfs()}>option2</li>\r\n                <li onClick={() => this.visualizeIBestfsDiag()}>option3</li>\r\n                <li onClick={() => this.visualizeBiBestfsDiag()}>option4</li>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"buttf2\" tabindex=\"1\">\r\n            <div class=\"buttf\">\r\n              <div class=\"buttonfi\">\r\n                <a>IDA Star</a>\r\n              </div>\r\n              <div class=\"optf\">\r\n                <li onClick={() => this.visualizeIDAstar()}>IDA-Star</li>\r\n                <li onClick={() => this.visualizeIDAstarDiag()}>Diagonal</li>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"buttf2\" tabindex=\"1\">\r\n            <div class=\"buttf\">\r\n              <div class=\"buttonfi\">\r\n                <a>Jump Point</a>\r\n              </div>\r\n              <div class=\"optf\">\r\n                <li onClick={() => this.visualizeJPS()}>Jump Point</li>\r\n                <li onClick={() => this.visualizeOrthJPS()}>Orthogonal</li>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"walls\">\r\n            WALLS\r\n            <div className=\"wallweight\">\r\n              <input\r\n                type=\"radio\"\r\n                id=\"infiwall\"\r\n                name=\"radiowall\"\r\n                value=\"finite\"\r\n                checked={!this.state.fin}\r\n                onChange={this.handleOptionChangeinfinite}\r\n              />\r\n              <label for=\"infiwall\">Infinite Wall</label>\r\n\r\n              <input\r\n                type=\"radio\"\r\n                id=\"fiwall\"\r\n                name=\"radiowall\"\r\n                value=\"infinite\"\r\n                checked={this.state.fin}\r\n                onChange={this.handleOptionChangefinite}\r\n              />\r\n              <label for=\"fiwall\">Finite Walls</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"inibutt\">\r\n          <div className=\"startendwrap\">\r\n            <div\r\n              className=\"pauseresume\"\r\n              tabIndex=\"2\"\r\n              onClick={() =>\r\n                alert(`            Visualization is paused.\r\n          Click on Resume to continue.\r\n              `)\r\n              }\r\n            ></div>\r\n          </div>\r\n\r\n          <div className=\"iniwrap\">\r\n            <div className=\"pathwall\" onClick={(grid) => this.clearPath(grid)}>\r\n              Clear Path\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"startendwrap\">\r\n            <div\r\n              onClick={async () => {\r\n                window.location =\r\n                  \"https://hackgod2000.github.io/TouchDown.js/#/end\";\r\n              }}\r\n              className=\"startend2\"\r\n            >\r\n              END\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"iniwrap\">\r\n            <div className=\"pathwall\" onClick={(grid) => this.clearwall(grid)}>\r\n              Clear Wall\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {\r\n                    row,\r\n                    col,\r\n                    isFinish,\r\n                    isStart,\r\n                    isWall,\r\n                    isWallweight,\r\n                  } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      isWallweight={isWallweight}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < t_rows; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < t_cols; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    isWallweight: false,\r\n    wallweight: 1,\r\n    previousNode: null,\r\n    gscore: Infinity,\r\n    fscore: Infinity,\r\n    hscore: Infinity,\r\n    inclosed: false,\r\n    inopen: false,\r\n    startvisited: false,\r\n    endvisited: false,\r\n    nex: null,\r\n    next: null,\r\n  };\r\n};\r\nconst getNewGridWithWallToggled = (grid, row, col, weight, fin) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall && !fin,\r\n    isWallweight: !node.isWallweight && fin,\r\n  };\r\n  if (newNode.isWall || newNode.isWallweight) {\r\n    newNode.wallweight = weight;\r\n  }\r\n  newGrid[row][col] = newNode;\r\n  console.log(newGrid[row][col]);\r\n  return newGrid;\r\n};\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Endpage from \"./Components/endpage\";\r\nimport Model from \"./Components/Model\";\r\nimport PathfindingVisualizer from \"./Components/PathfindingVisualizer/PathfindingVisualizer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <div className=\"App\">\r\n          <Route exact path=\"/\">\r\n            <Model />\r\n          </Route>\r\n          <Route path=\"/algo\">\r\n            <PathfindingVisualizer />\r\n          </Route>\r\n          <Route path=\"/end\">\r\n            <Endpage />\r\n          </Route>\r\n        </div>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}